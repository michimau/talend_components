<%@ jet
        imports="
                org.talend.core.model.process.INode
                org.talend.core.model.process.ElementParameterParser
                org.talend.designer.codegen.config.CodeGeneratorArgument
         "
%>

<%
        CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
        INode node = (INode)codeGenArgument.getArgument();
        String cid = node.getUniqueName();
	String enabled = ElementParameterParser.getValue(node, "__ENABLED__");
	String interval = ElementParameterParser.getValue(node, "__INTERVAL__");
	String threshold = ElementParameterParser.getValue(node, "__THRESHOLD__");
 %>

/*
 * Create a new Thread and monitor the Runtime.
 */
Thread <%=cid %>_thread = new Thread() {
	int <%=cid %>_stop = 0;

	public void run() {
		if(! <%=enabled %>) return;

		try {
			Runtime <%=cid %>_r = Runtime.getRuntime();
			
			while(<%=cid %>_stop != 1) {
				long <%=cid %>_maxMemory = <%=cid %>_r.maxMemory() / 1048576l;
				long <%=cid %>_totalMemory = <%=cid %>_r.totalMemory() / 1048576l;
				long <%=cid %>_freeMemory = <%=cid %>_r.freeMemory() / 1048576l;
				int <%=cid %>_maxPercent = (int) (((<%=cid %>_totalMemory - <%=cid %>_freeMemory) * 100f) / <%=cid %>_maxMemory + 0.5);

				if(<%=cid %>_maxPercent >= <%=threshold %>) {
					System.err.println("<%=cid %>: using " +
							   (<%=cid %>_totalMemory - <%=cid %>_freeMemory) + "MB/" +
							   <%=cid %>_totalMemory + "MB (max=" +
							   <%=cid %>_maxMemory + "MB/" +
							   <%=cid %>_maxPercent +  "%) (processors=" +
							   <%=cid %>_r.availableProcessors() + ")");

				}
				else {
					System.out.println("<%=cid %>: using " +
							   (<%=cid %>_totalMemory - <%=cid %>_freeMemory) + "MB/" +
							   <%=cid %>_totalMemory + "MB (max=" +
							   <%=cid %>_maxMemory + "MB/" +
							   <%=cid %>_maxPercent +  "%) (processors=" +
							   <%=cid %>_r.availableProcessors() + ")");
				}
				Thread.sleep(<%=interval %>);
			}
		}
		catch(InterruptedException <%=cid %>_e) {
			System.err.println(<%=cid %>_e);
			Thread.currentThread().interrupt();
			return;
		}
	}

	//public void finish() {
	//	<%=cid %>_stop = 1;
	//}
};

<%=cid %>_thread.setDaemon(true);
<%=cid %>_thread.start();
//globalMap.put("<%=cid %>", <%=cid %>_thread);
