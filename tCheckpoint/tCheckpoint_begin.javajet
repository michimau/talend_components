<%@ jet
        imports="
                org.talend.core.model.process.INode
                org.talend.core.model.process.ElementParameterParser
                org.talend.designer.codegen.config.CodeGeneratorArgument
         "
%>

<%
        CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
        INode node = (INode)codeGenArgument.getArgument();
        String cid = node.getUniqueName();
 %>

/*
 * Set checkpoint.
*/
if(globalMap.get("tCheckpoint_checkpointFile") == null) throw new RuntimeException("<%=cid %>: you must call tCheckpointStart before calling a tCheckpoint.");
if(globalMap.get("tCheckpoint_checkpoint") == null) globalMap.put("tCheckpoint_checkpoint", new Integer(1));
else globalMap.put("tCheckpoint_checkpoint", new Integer(((Integer) globalMap.get("tCheckpoint_checkpoint")).intValue() + 1));

/*
 * Test if we're in recovery.
 */
if(globalMap.get("tCheckpoint_lastCheckpoint") != null) {

	/*
	 * The current checkpoint had already been executed. No action is needed.
	 */
	if(((Integer) globalMap.get("tCheckpoint_checkpoint")) < ((Integer) globalMap.get("tCheckpoint_lastCheckpoint"))) {
		globalMap.put("<%=cid %>_NEEDS_RECOVERY", false);
		globalMap.put("<%=cid %>_NEEDS_EXECUTION", false);
	
		//System.err.println("tCheckpoint: checkpoint " + (Integer) globalMap.get("tCheckpoint_checkpoint") + " was previously executed and does not need recovery");
	}
	
	/*
	 * The current checkpoint is the point of failure. It needs recovery.
	 */
	else if(((Integer) globalMap.get("tCheckpoint_checkpoint")).equals(((Integer) globalMap.get("tCheckpoint_lastCheckpoint")))) {
		globalMap.put("<%=cid %>_NEEDS_RECOVERY", true);
		globalMap.put("<%=cid %>_NEEDS_EXECUTION", true);

		//System.err.println("tCheckpoint: checkpoint " + (Integer) globalMap.get("tCheckpoint_checkpoint") + " previously failed and needs recovery");
	}
	else if(((Integer) globalMap.get("tCheckpoint_checkpoint")).equals(((Integer) globalMap.get("tCheckpoint_lastCheckpoint")) + 1)) {
		globalMap.put("<%=cid %>_NEEDS_RECOVERY", false);
		globalMap.put("<%=cid %>_NEEDS_EXECUTION", true);
		
		//System.err.println("tCheckpoint: checkpoint " + (Integer) globalMap.get("tCheckpoint_checkpoint") + " has not been executed; processing should resume from this checkpoint");
	}
	else {
		globalMap.put("<%=cid %>_NEEDS_RECOVERY", false);
		globalMap.put("<%=cid %>_NEEDS_EXECUTION", true);
	}
}
else {
	globalMap.put("<%=cid %>_NEEDS_RECOVERY", false);
	globalMap.put("<%=cid %>_NEEDS_EXECUTION", true);
}

{
	java.io.PrintWriter out = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter((java.io.File) globalMap.get("tCheckpoint_checkpointFile"), true)));

	try {
	
		String statusStr = "NeedsRecovery=" + (Boolean) globalMap.get("<%=cid %>_NEEDS_RECOVERY") + ", NeedsExecution=" + (Boolean) globalMap.get("<%=cid %>_NEEDS_EXECUTION");
	
		out.println((Integer) globalMap.get("tCheckpoint_checkpoint") + ";START;" + statusStr);
	}
	finally {
		out.close();
	}
	//catch (IOException e) {
	//	throw new RuntimeException("<%=cid %>: failed to write checkpoint file");
	//}
}

<%=ElementParameterParser.getValue(node, "__CODE__") %>
