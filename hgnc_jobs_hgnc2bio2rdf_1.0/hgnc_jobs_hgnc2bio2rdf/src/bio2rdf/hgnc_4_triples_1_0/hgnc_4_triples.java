// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.0.1.r74687)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package bio2rdf.hgnc_4_triples_1_0;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: hgnc_4_triples Purpose: <br>
 * Description: <br>
 * 
 * @author test@talend.com
 * @version 5.0.1.r74687
 * @status PROD
 */
public class hgnc_4_triples implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (workPath != null) {

				this.setProperty("workPath", workPath.toString());

			}

		}

		public String workPath;

		public String getWorkPath() {
			return this.workPath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "hgnc_4_triples";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_HI8F4ILMEeGdiZZuHfjqdA", "1.0");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hgnc_4_triples.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hgnc_4_triples.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_25", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplace_1", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_17", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileInputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplace_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplace_2", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplace_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplace_3", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_19", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_23", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_3", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /**
				 * Start field
				 * tFileOutputDelimited_5:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
				 * Start
				 * field tFileOutputDelimited_5:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;
				try {
					outtFileOutputDelimited_5 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_5,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_5 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_5 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_5", false);
					start_Hash.put("tFileInputDelimited_5", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_5";

					int tos_count_tFileInputDelimited_5 = 0;

					class RowHelper_tFileInputDelimited_5 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row8Struct row8) throws Exception {

							String temp = "";

							row8.subject = fid.get(0);

							row8.predicate = fid.get(1);

							row8.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row8.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row8.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_5 rowHelper_tFileInputDelimited_5 = new RowHelper_tFileInputDelimited_5();

					int nb_line_tFileInputDelimited_5 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
					try {

						Object filename_tFileInputDelimited_5 = context.workPath
								+ "/hgnc1.tsv";
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
							if (footer_value_tFileInputDelimited_5 > 0
									|| random_value_tFileInputDelimited_5 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "/hgnc1.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_5 != null
								&& fid_tFileInputDelimited_5.nextRecord()) {

							row8 = null;

							boolean whetherReject_tFileInputDelimited_5 = false;
							row8 = new row8Struct();
							try {

								rowHelper_tFileInputDelimited_5.valueToConn(
										fid_tFileInputDelimited_5, row8);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_5 = true;

								System.err.println(e.getMessage());
								row8 = null;

							}

							/**
							 * [tFileInputDelimited_5 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_5 main ] start
							 */

							currentComponent = "tFileInputDelimited_5";

							tos_count_tFileInputDelimited_5++;

							/**
							 * [tFileInputDelimited_5 main ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tFileOutputDelimited_5 main ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

								StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();

								if (row8.subject != null) {

									sb_tFileOutputDelimited_5.append(

									row8.subject

									);

								}

								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);

								if (row8.predicate != null) {

									sb_tFileOutputDelimited_5.append(

									row8.predicate

									);

								}

								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);

								if (row8.object != null) {

									sb_tFileOutputDelimited_5.append(

									row8.object

									);

								}

								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);

								if (row8.isLiteral != null) {

									sb_tFileOutputDelimited_5.append(

									row8.isLiteral

									);

								}

								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

								nb_line_tFileOutputDelimited_5++;

								outtFileOutputDelimited_5
										.write(sb_tFileOutputDelimited_5
												.toString());

								tos_count_tFileOutputDelimited_5++;

								/**
								 * [tFileOutputDelimited_5 main ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFileInputDelimited_5 end ] start
							 */

							currentComponent = "tFileInputDelimited_5";

						}
					} finally {
						if (!((Object) (context.workPath + "/hgnc1.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_5 != null) {
								fid_tFileInputDelimited_5.close();
							}
						}
						if (fid_tFileInputDelimited_5 != null) {
							globalMap.put("tFileInputDelimited_5_NB_LINE",
									fid_tFileInputDelimited_5.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_5", true);
					end_Hash.put("tFileInputDelimited_5", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_5 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

				} finally {
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
					globalMap.put("tFileOutputDelimited_5_NB_LINE",
							nb_line_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME",
							fileName_tFileOutputDelimited_5);
				} // finally

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System
						.currentTimeMillis());

				tFileInputDelimited_6Process(globalMap);

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				if (filetFileOutputDelimited_6.exists()) {
					isFileGenerated_tFileOutputDelimited_6 = false;
				}

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;
				try {
					outtFileOutputDelimited_6 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_6,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_6 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_6 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_6", false);
					start_Hash.put("tFileInputDelimited_6", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_6";

					int tos_count_tFileInputDelimited_6 = 0;

					class RowHelper_tFileInputDelimited_6 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row9Struct row9) throws Exception {

							String temp = "";

							row9.subject = fid.get(0);

							row9.predicate = fid.get(1);

							row9.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row9.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row9.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_6 rowHelper_tFileInputDelimited_6 = new RowHelper_tFileInputDelimited_6();

					int nb_line_tFileInputDelimited_6 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
					try {

						Object filename_tFileInputDelimited_6 = context.workPath
								+ "/hgnc2.tsv";
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
							if (footer_value_tFileInputDelimited_6 > 0
									|| random_value_tFileInputDelimited_6 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "/hgnc2.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_6 != null
								&& fid_tFileInputDelimited_6.nextRecord()) {

							row9 = null;

							boolean whetherReject_tFileInputDelimited_6 = false;
							row9 = new row9Struct();
							try {

								rowHelper_tFileInputDelimited_6.valueToConn(
										fid_tFileInputDelimited_6, row9);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_6 = true;

								System.err.println(e.getMessage());
								row9 = null;

							}

							/**
							 * [tFileInputDelimited_6 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_6 main ] start
							 */

							currentComponent = "tFileInputDelimited_6";

							tos_count_tFileInputDelimited_6++;

							/**
							 * [tFileInputDelimited_6 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFileOutputDelimited_6 main ] start
								 */

								currentComponent = "tFileOutputDelimited_6";

								StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();

								if (row9.subject != null) {

									sb_tFileOutputDelimited_6.append(

									row9.subject

									);

								}

								sb_tFileOutputDelimited_6
										.append(OUT_DELIM_tFileOutputDelimited_6);

								if (row9.predicate != null) {

									sb_tFileOutputDelimited_6.append(

									row9.predicate

									);

								}

								sb_tFileOutputDelimited_6
										.append(OUT_DELIM_tFileOutputDelimited_6);

								if (row9.object != null) {

									sb_tFileOutputDelimited_6.append(

									row9.object

									);

								}

								sb_tFileOutputDelimited_6
										.append(OUT_DELIM_tFileOutputDelimited_6);

								if (row9.isLiteral != null) {

									sb_tFileOutputDelimited_6.append(

									row9.isLiteral

									);

								}

								sb_tFileOutputDelimited_6
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

								nb_line_tFileOutputDelimited_6++;

								outtFileOutputDelimited_6
										.write(sb_tFileOutputDelimited_6
												.toString());

								tos_count_tFileOutputDelimited_6++;

								/**
								 * [tFileOutputDelimited_6 main ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFileInputDelimited_6 end ] start
							 */

							currentComponent = "tFileInputDelimited_6";

						}
					} finally {
						if (!((Object) (context.workPath + "/hgnc2.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_6 != null) {
								fid_tFileInputDelimited_6.close();
							}
						}
						if (fid_tFileInputDelimited_6 != null) {
							globalMap.put("tFileInputDelimited_6_NB_LINE",
									fid_tFileInputDelimited_6.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_6", true);
					end_Hash.put("tFileInputDelimited_6", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_6 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 end ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

				} finally {
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
					globalMap.put("tFileOutputDelimited_6_NB_LINE",
							nb_line_tFileOutputDelimited_6);
					globalMap.put("tFileOutputDelimited_6_FILE_NAME",
							fileName_tFileOutputDelimited_6);
				} // finally

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System
						.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					class RowHelper_tFileInputDelimited_1 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row1Struct row1) throws Exception {

							String temp = "";

							row1.subject = fid.get(0);

							row1.predicate = fid.get(1);

							row1.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row1.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row1.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					try {

						Object filename_tFileInputDelimited_1 = context.workPath
								+ "/hgnc3.tsv";
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0
									|| random_value_tFileInputDelimited_1 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "/hgnc3.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null
								&& fid_tFileInputDelimited_1.nextRecord()) {

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								rowHelper_tFileInputDelimited_1.valueToConn(
										fid_tFileInputDelimited_1, row1);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

								if (row1.subject != null) {

									sb_tFileOutputDelimited_1.append(

									row1.subject

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.predicate != null) {

									sb_tFileOutputDelimited_1.append(

									row1.predicate

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.object != null) {

									sb_tFileOutputDelimited_1.append(

									row1.object

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.isLiteral != null) {

									sb_tFileOutputDelimited_1.append(

									row1.isLiteral

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (context.workPath + "/hgnc3.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									fid_tFileInputDelimited_1.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System
						.currentTimeMillis());

				tFileInputDelimited_4Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					isFileGenerated_tFileOutputDelimited_4 = false;
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;
				try {
					outtFileOutputDelimited_4 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_4,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_4 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_4 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_4", false);
					start_Hash.put("tFileInputDelimited_4", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_4";

					int tos_count_tFileInputDelimited_4 = 0;

					class RowHelper_tFileInputDelimited_4 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row7Struct row7) throws Exception {

							String temp = "";

							row7.subject = fid.get(0);

							row7.predicate = fid.get(1);

							row7.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row7.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row7.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_4 rowHelper_tFileInputDelimited_4 = new RowHelper_tFileInputDelimited_4();

					int nb_line_tFileInputDelimited_4 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
					try {

						Object filename_tFileInputDelimited_4 = context.workPath
								+ "/hgnc4.tsv";
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
							if (footer_value_tFileInputDelimited_4 > 0
									|| random_value_tFileInputDelimited_4 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "/hgnc4.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_4 != null
								&& fid_tFileInputDelimited_4.nextRecord()) {

							row7 = null;

							boolean whetherReject_tFileInputDelimited_4 = false;
							row7 = new row7Struct();
							try {

								rowHelper_tFileInputDelimited_4.valueToConn(
										fid_tFileInputDelimited_4, row7);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_4 = true;

								System.err.println(e.getMessage());
								row7 = null;

							}

							/**
							 * [tFileInputDelimited_4 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_4 main ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							tos_count_tFileInputDelimited_4++;

							/**
							 * [tFileInputDelimited_4 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tFileOutputDelimited_4 main ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();

								if (row7.subject != null) {

									sb_tFileOutputDelimited_4.append(

									row7.subject

									);

								}

								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);

								if (row7.predicate != null) {

									sb_tFileOutputDelimited_4.append(

									row7.predicate

									);

								}

								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);

								if (row7.object != null) {

									sb_tFileOutputDelimited_4.append(

									row7.object

									);

								}

								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);

								if (row7.isLiteral != null) {

									sb_tFileOutputDelimited_4.append(

									row7.isLiteral

									);

								}

								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

								nb_line_tFileOutputDelimited_4++;

								outtFileOutputDelimited_4
										.write(sb_tFileOutputDelimited_4
												.toString());

								tos_count_tFileOutputDelimited_4++;

								/**
								 * [tFileOutputDelimited_4 main ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFileInputDelimited_4 end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

						}
					} finally {
						if (!((Object) (context.workPath + "/hgnc4.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_4 != null) {
								fid_tFileInputDelimited_4.close();
							}
						}
						if (fid_tFileInputDelimited_4 != null) {
							globalMap.put("tFileInputDelimited_4_NB_LINE",
									fid_tFileInputDelimited_4.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_4", true);
					end_Hash.put("tFileInputDelimited_4", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

				} finally {
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
					globalMap.put("tFileOutputDelimited_4_FILE_NAME",
							fileName_tFileOutputDelimited_4);
				} // finally

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System
						.currentTimeMillis());

				tFileInputDelimited_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;
				try {
					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_2", false);
					start_Hash.put("tFileInputDelimited_2", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_2";

					int tos_count_tFileInputDelimited_2 = 0;

					class RowHelper_tFileInputDelimited_2 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row2Struct row2) throws Exception {

							String temp = "";

							row2.subject = fid.get(0);

							row2.predicate = fid.get(1);

							row2.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row2.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row2.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2 = new RowHelper_tFileInputDelimited_2();

					int nb_line_tFileInputDelimited_2 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
					try {

						Object filename_tFileInputDelimited_2 = context.workPath
								+ "genefam1.tsv";
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
							if (footer_value_tFileInputDelimited_2 > 0
									|| random_value_tFileInputDelimited_2 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "genefam1.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_2 != null
								&& fid_tFileInputDelimited_2.nextRecord()) {

							row2 = null;

							boolean whetherReject_tFileInputDelimited_2 = false;
							row2 = new row2Struct();
							try {

								rowHelper_tFileInputDelimited_2.valueToConn(
										fid_tFileInputDelimited_2, row2);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_2 = true;

								System.err.println(e.getMessage());
								row2 = null;

							}

							/**
							 * [tFileInputDelimited_2 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_2 main ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							tos_count_tFileInputDelimited_2++;

							/**
							 * [tFileInputDelimited_2 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

								if (row2.subject != null) {

									sb_tFileOutputDelimited_2.append(

									row2.subject

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (row2.predicate != null) {

									sb_tFileOutputDelimited_2.append(

									row2.predicate

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (row2.object != null) {

									sb_tFileOutputDelimited_2.append(

									row2.object

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (row2.isLiteral != null) {

									sb_tFileOutputDelimited_2.append(

									row2.isLiteral

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;

								outtFileOutputDelimited_2
										.write(sb_tFileOutputDelimited_2
												.toString());

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputDelimited_2 end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

						}
					} finally {
						if (!((Object) (context.workPath + "genefam1.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_2 != null) {
								fid_tFileInputDelimited_2.close();
							}
						}
						if (fid_tFileInputDelimited_2 != null) {
							globalMap.put("tFileInputDelimited_2_NB_LINE",
									fid_tFileInputDelimited_2.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_2", true);
					end_Hash.put("tFileInputDelimited_2", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System
						.currentTimeMillis());

				tFileInputDelimited_8Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						context.workPath + "/triples.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);
				if (filetFileOutputDelimited_8.exists()) {
					isFileGenerated_tFileOutputDelimited_8 = false;
				}

				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /**
				 * Start field
				 * tFileOutputDelimited_8:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
				 * Start
				 * field tFileOutputDelimited_8:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;
				try {
					outtFileOutputDelimited_8 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_8,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_8 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_8 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_8", false);
					start_Hash.put("tFileInputDelimited_8", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_8";

					int tos_count_tFileInputDelimited_8 = 0;

					class RowHelper_tFileInputDelimited_8 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row14Struct row14) throws Exception {

							String temp = "";

							row14.subject = fid.get(0);

							row14.predicate = fid.get(1);

							row14.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row14.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row14.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_8 rowHelper_tFileInputDelimited_8 = new RowHelper_tFileInputDelimited_8();

					int nb_line_tFileInputDelimited_8 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
					try {

						Object filename_tFileInputDelimited_8 = context.workPath
								+ "genefam2.tsv";
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
							if (footer_value_tFileInputDelimited_8 > 0
									|| random_value_tFileInputDelimited_8 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "genefam2.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_8 != null
								&& fid_tFileInputDelimited_8.nextRecord()) {

							row14 = null;

							boolean whetherReject_tFileInputDelimited_8 = false;
							row14 = new row14Struct();
							try {

								rowHelper_tFileInputDelimited_8.valueToConn(
										fid_tFileInputDelimited_8, row14);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_8 = true;

								System.err.println(e.getMessage());
								row14 = null;

							}

							/**
							 * [tFileInputDelimited_8 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_8 main ] start
							 */

							currentComponent = "tFileInputDelimited_8";

							tos_count_tFileInputDelimited_8++;

							/**
							 * [tFileInputDelimited_8 main ] stop
							 */
							// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tFileOutputDelimited_8 main ] start
								 */

								currentComponent = "tFileOutputDelimited_8";

								StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();

								if (row14.subject != null) {

									sb_tFileOutputDelimited_8.append(

									row14.subject

									);

								}

								sb_tFileOutputDelimited_8
										.append(OUT_DELIM_tFileOutputDelimited_8);

								if (row14.predicate != null) {

									sb_tFileOutputDelimited_8.append(

									row14.predicate

									);

								}

								sb_tFileOutputDelimited_8
										.append(OUT_DELIM_tFileOutputDelimited_8);

								if (row14.object != null) {

									sb_tFileOutputDelimited_8.append(

									row14.object

									);

								}

								sb_tFileOutputDelimited_8
										.append(OUT_DELIM_tFileOutputDelimited_8);

								if (row14.isLiteral != null) {

									sb_tFileOutputDelimited_8.append(

									row14.isLiteral

									);

								}

								sb_tFileOutputDelimited_8
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

								nb_line_tFileOutputDelimited_8++;

								outtFileOutputDelimited_8
										.write(sb_tFileOutputDelimited_8
												.toString());

								tos_count_tFileOutputDelimited_8++;

								/**
								 * [tFileOutputDelimited_8 main ] stop
								 */

							} // End of branch "row14"

							/**
							 * [tFileInputDelimited_8 end ] start
							 */

							currentComponent = "tFileInputDelimited_8";

						}
					} finally {
						if (!((Object) (context.workPath + "genefam2.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_8 != null) {
								fid_tFileInputDelimited_8.close();
							}
						}
						if (fid_tFileInputDelimited_8 != null) {
							globalMap.put("tFileInputDelimited_8_NB_LINE",
									fid_tFileInputDelimited_8.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_8", true);
					end_Hash.put("tFileInputDelimited_8", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_8 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 end ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

				} finally {
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
					globalMap.put("tFileOutputDelimited_8_NB_LINE",
							nb_line_tFileOutputDelimited_8);
					globalMap.put("tFileOutputDelimited_8_FILE_NAME",
							fileName_tFileOutputDelimited_8);
				} // finally

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System
						.currentTimeMillis());

				tFileInputDelimited_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class triples1_tsvStruct implements
			routines.system.IPersistableRow<triples1_tsvStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(triples1_tsvStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class null_triplesStruct implements
			routines.system.IPersistableRow<null_triplesStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(null_triplesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class triples_tsvStruct implements
			routines.system.IPersistableRow<triples_tsvStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(triples_tsvStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				triples_tsvStruct triples_tsv = new triples_tsvStruct();
				triples_tsvStruct row6 = triples_tsv;
				row5Struct row5 = new row5Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row4 = out1;
				triples1_tsvStruct triples1_tsv = new triples1_tsvStruct();
				triples1_tsvStruct row15 = triples1_tsv;
				null_triplesStruct null_triples = new null_triplesStruct();
				null_triplesStruct row18 = null_triples;

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.workPath + "/triples1.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;
				try {
					outtFileOutputDelimited_3 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_3,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tFlowMeter_17 begin ] start
					 */

					ok_Hash.put("tFlowMeter_17", false);
					start_Hash.put("tFlowMeter_17", System.currentTimeMillis());
					currentComponent = "tFlowMeter_17";

					int tos_count_tFlowMeter_17 = 0;

					int count_tFlowMeter_17 = 0;

					/**
					 * [tFlowMeter_17 begin ] stop
					 */

					/**
					 * [tReplace_1 begin ] start
					 */

					ok_Hash.put("tReplace_1", false);
					start_Hash.put("tReplace_1", System.currentTimeMillis());
					currentComponent = "tReplace_1";

					int tos_count_tReplace_1 = 0;

					int nb_line_tReplace_1 = 0;
					int nb_line_ok_tReplace_1 = 0;

					/**
					 * [tReplace_1 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());
					currentComponent = "tLogRow_1";

					int tos_count_tLogRow_1 = 0;

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					// ###############################

					// ###############################
					// # Outputs initialization
					out1Struct out1_tmp = new out1Struct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tReplicate_1 begin ] start
					 */

					ok_Hash.put("tReplicate_1", false);
					start_Hash.put("tReplicate_1", System.currentTimeMillis());
					currentComponent = "tReplicate_1";

					int tos_count_tReplicate_1 = 0;

					/**
					 * [tReplicate_1 begin ] stop
					 */

					/**
					 * [tFlowMeter_23 begin ] start
					 */

					ok_Hash.put("tFlowMeter_23", false);
					start_Hash.put("tFlowMeter_23", System.currentTimeMillis());
					currentComponent = "tFlowMeter_23";

					int tos_count_tFlowMeter_23 = 0;

					int count_tFlowMeter_23 = 0;

					/**
					 * [tFlowMeter_23 begin ] stop
					 */

					/**
					 * [tFilterRow_1 begin ] start
					 */

					ok_Hash.put("tFilterRow_1", false);
					start_Hash.put("tFilterRow_1", System.currentTimeMillis());
					currentComponent = "tFilterRow_1";

					int tos_count_tFilterRow_1 = 0;
					int nb_line_tFilterRow_1 = 0;
					int nb_line_ok_tFilterRow_1 = 0;
					int nb_line_reject_tFilterRow_1 = 0;

					class Operator_tFilterRow_1 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_1(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_1 begin ] stop
					 */

					/**
					 * [tFlowMeter_25 begin ] start
					 */

					ok_Hash.put("tFlowMeter_25", false);
					start_Hash.put("tFlowMeter_25", System.currentTimeMillis());
					currentComponent = "tFlowMeter_25";

					int tos_count_tFlowMeter_25 = 0;

					int count_tFlowMeter_25 = 0;

					/**
					 * [tFlowMeter_25 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_3 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_3", false);
					start_Hash.put("tFileInputDelimited_3", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_3";

					int tos_count_tFileInputDelimited_3 = 0;

					class RowHelper_tFileInputDelimited_3 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								triples_tsvStruct triples_tsv) throws Exception {

							String temp = "";

							triples_tsv.subject = fid.get(0);

							triples_tsv.predicate = fid.get(1);

							triples_tsv.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								triples_tsv.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								triples_tsv.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3 = new RowHelper_tFileInputDelimited_3();

					int nb_line_tFileInputDelimited_3 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
					try {

						Object filename_tFileInputDelimited_3 = context.workPath
								+ "triples.tsv";
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
							if (footer_value_tFileInputDelimited_3 > 0
									|| random_value_tFileInputDelimited_3 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "triples.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_3 != null
								&& fid_tFileInputDelimited_3.nextRecord()) {

							triples_tsv = null;

							boolean whetherReject_tFileInputDelimited_3 = false;
							triples_tsv = new triples_tsvStruct();
							try {

								rowHelper_tFileInputDelimited_3.valueToConn(
										fid_tFileInputDelimited_3, triples_tsv);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_3 = true;

								System.err.println(e.getMessage());
								triples_tsv = null;

							}

							/**
							 * [tFileInputDelimited_3 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_3 main ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							tos_count_tFileInputDelimited_3++;

							/**
							 * [tFileInputDelimited_3 main ] stop
							 */
							// Start of branch "triples_tsv"
							if (triples_tsv != null) {

								/**
								 * [tFlowMeter_25 main ] start
								 */

								currentComponent = "tFlowMeter_25";

								count_tFlowMeter_25++;

								row6 = triples_tsv;

								tos_count_tFlowMeter_25++;

								/**
								 * [tFlowMeter_25 main ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								row5 = null;
								null_triples = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
										"&&");
								ope_tFilterRow_1.matches((row6.object != null),
										"object!=null failed");
								ope_tFilterRow_1.matches(
										(row6.isLiteral != null),
										"isLiteral!=null failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row5 == null) {
										row5 = new row5Struct();
									}
									row5.subject = row6.subject;
									row5.predicate = row6.predicate;
									row5.object = row6.object;
									row5.isLiteral = row6.isLiteral;
									nb_line_ok_tFilterRow_1++;
								} else {
									if (null_triples == null) {
										null_triples = new null_triplesStruct();
									}
									null_triples.subject = row6.subject;
									null_triples.predicate = row6.predicate;
									null_triples.object = row6.object;
									null_triples.isLiteral = row6.isLiteral;
									null_triples.errorMessage = ope_tFilterRow_1
											.getErrorMsg();
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables
										// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										// # Output table : 'out1'
										// # Filter conditions
										if (

										!(row5.object.equals("") || (StringHandling
												.RIGHT(row5.object, 1).equals(
														":") && !row5.isLiteral))

										) {
											out1_tmp.subject = row5.subject;
											out1_tmp.predicate = row5.predicate;
											out1_tmp.object = row5.object;
											out1_tmp.isLiteral = row5.isLiteral;
											out1 = out1_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tLogRow_1 main ] start
										 */

										currentComponent = "tLogRow_1";

										row4 = out1;

										tos_count_tLogRow_1++;

										/**
										 * [tLogRow_1 main ] stop
										 */

										/**
										 * [tReplace_1 main ] start
										 */

										currentComponent = "tReplace_1";

										String searchStr_tReplace_1_1 = "hgnc_vocabulary:"
												+ "";
										row4.predicate = StringUtils
												.replaceAllStrictly(
														row4.predicate,
														searchStr_tReplace_1_1,
														"http://bio2rdf.org/hgnc_vocabulary#"
																+ "", false,
														false);
										String searchStr_tReplace_1_2 = "bm:hgnc:"
												+ "";
										row4.object = StringUtils
												.replaceAllStrictly(
														row4.object,
														searchStr_tReplace_1_2,
														"http://bio2rdf.org/hgnc:"
																+ "", true,
														false);
										nb_line_ok_tReplace_1++;
										triples1_tsv.subject = row4.subject;
										triples1_tsv.predicate = row4.predicate;
										triples1_tsv.object = row4.object;
										triples1_tsv.isLiteral = row4.isLiteral;
										nb_line_tReplace_1++;

										tos_count_tReplace_1++;

										/**
										 * [tReplace_1 main ] stop
										 */

										/**
										 * [tFlowMeter_17 main ] start
										 */

										currentComponent = "tFlowMeter_17";

										count_tFlowMeter_17++;

										row15 = triples1_tsv;

										tos_count_tFlowMeter_17++;

										/**
										 * [tFlowMeter_17 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_3 main ] start
										 */

										currentComponent = "tFileOutputDelimited_3";

										StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

										if (row15.subject != null) {

											sb_tFileOutputDelimited_3.append(

											row15.subject

											);

										}

										sb_tFileOutputDelimited_3
												.append(OUT_DELIM_tFileOutputDelimited_3);

										if (row15.predicate != null) {

											sb_tFileOutputDelimited_3.append(

											row15.predicate

											);

										}

										sb_tFileOutputDelimited_3
												.append(OUT_DELIM_tFileOutputDelimited_3);

										if (row15.object != null) {

											sb_tFileOutputDelimited_3.append(

											row15.object

											);

										}

										sb_tFileOutputDelimited_3
												.append(OUT_DELIM_tFileOutputDelimited_3);

										if (row15.isLiteral != null) {

											sb_tFileOutputDelimited_3.append(

											row15.isLiteral

											);

										}

										sb_tFileOutputDelimited_3
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

										nb_line_tFileOutputDelimited_3++;

										outtFileOutputDelimited_3
												.write(sb_tFileOutputDelimited_3
														.toString());

										tos_count_tFileOutputDelimited_3++;

										/**
										 * [tFileOutputDelimited_3 main ] stop
										 */

									} // End of branch "out1"

								} // End of branch "row5"

								// Start of branch "null_triples"
								if (null_triples != null) {

									/**
									 * [tFlowMeter_23 main ] start
									 */

									currentComponent = "tFlowMeter_23";

									count_tFlowMeter_23++;

									row18 = null_triples;

									tos_count_tFlowMeter_23++;

									/**
									 * [tFlowMeter_23 main ] stop
									 */

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

								} // End of branch "null_triples"

							} // End of branch "triples_tsv"

							/**
							 * [tFileInputDelimited_3 end ] start
							 */

							currentComponent = "tFileInputDelimited_3";

						}
					} finally {
						if (!((Object) (context.workPath + "triples.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_3 != null) {
								fid_tFileInputDelimited_3.close();
							}
						}
						if (fid_tFileInputDelimited_3 != null) {
							globalMap.put("tFileInputDelimited_3_NB_LINE",
									fid_tFileInputDelimited_3.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_3", true);
					end_Hash.put("tFileInputDelimited_3", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_3 end ] stop
					 */

					/**
					 * [tFlowMeter_25 end ] start
					 */

					currentComponent = "tFlowMeter_25";

					tFlowMeterCatcher_1.addMessage("triples_tsv", new Integer(
							count_tFlowMeter_25), "null", "", "tFlowMeter_25");

					ok_Hash.put("tFlowMeter_25", true);
					end_Hash.put("tFlowMeter_25", System.currentTimeMillis());

					/**
					 * [tFlowMeter_25 end ] stop
					 */

					/**
					 * [tFilterRow_1 end ] start
					 */

					currentComponent = "tFilterRow_1";

					globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_OK",
							nb_line_ok_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_REJECT",
							nb_line_reject_tFilterRow_1);

					ok_Hash.put("tFilterRow_1", true);
					end_Hash.put("tFilterRow_1", System.currentTimeMillis());

					/**
					 * [tFilterRow_1 end ] stop
					 */

					/**
					 * [tFlowMeter_23 end ] start
					 */

					currentComponent = "tFlowMeter_23";

					tFlowMeterCatcher_1.addMessage("null_triples", new Integer(
							count_tFlowMeter_23), "null", "", "tFlowMeter_23");

					ok_Hash.put("tFlowMeter_23", true);
					end_Hash.put("tFlowMeter_23", System.currentTimeMillis());

					/**
					 * [tFlowMeter_23 end ] stop
					 */

					/**
					 * [tReplicate_1 end ] start
					 */

					currentComponent = "tReplicate_1";

					ok_Hash.put("tReplicate_1", true);
					end_Hash.put("tReplicate_1", System.currentTimeMillis());

					/**
					 * [tReplicate_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tReplace_1 end ] start
					 */

					currentComponent = "tReplace_1";

					globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
					globalMap.put("tReplace_1_NB_LINE_OK",
							nb_line_ok_tReplace_1);

					ok_Hash.put("tReplace_1", true);
					end_Hash.put("tReplace_1", System.currentTimeMillis());

					/**
					 * [tReplace_1 end ] stop
					 */

					/**
					 * [tFlowMeter_17 end ] start
					 */

					currentComponent = "tFlowMeter_17";

					tFlowMeterCatcher_1.addMessage("triples1_tsv", new Integer(
							count_tFlowMeter_17), "null", "", "tFlowMeter_17");

					ok_Hash.put("tFlowMeter_17", true);
					end_Hash.put("tFlowMeter_17", System.currentTimeMillis());

					/**
					 * [tFlowMeter_17 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System
						.currentTimeMillis());

				tFileInputDelimited_7Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String ntriple;

		public String getNtriple() {
			return this.ntriple;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.ntriple = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ntriple, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ntriple=" + ntriple);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hgnc_ntStruct implements
			routines.system.IPersistableRow<hgnc_ntStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String ntriple;

		public String getNtriple() {
			return this.ntriple;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.ntriple = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ntriple, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ntriple=" + ntriple);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hgnc_ntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();
				row13Struct row13 = new row13Struct();
				hgnc_ntStruct hgnc_nt = new hgnc_ntStruct();
				hgnc_ntStruct row10 = hgnc_nt;

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.workPath + "/hgnc.nt")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;
				try {
					outtFileOutputDelimited_7 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_7,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_7 begin ] stop
					 */

					/**
					 * [tFlowMeter_19 begin ] start
					 */

					ok_Hash.put("tFlowMeter_19", false);
					start_Hash.put("tFlowMeter_19", System.currentTimeMillis());
					currentComponent = "tFlowMeter_19";

					int tos_count_tFlowMeter_19 = 0;

					int count_tFlowMeter_19 = 0;

					/**
					 * [tFlowMeter_19 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					// ###############################

					// ###############################
					// # Outputs initialization
					hgnc_ntStruct hgnc_nt_tmp = new hgnc_ntStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tReplace_3 begin ] start
					 */

					ok_Hash.put("tReplace_3", false);
					start_Hash.put("tReplace_3", System.currentTimeMillis());
					currentComponent = "tReplace_3";

					int tos_count_tReplace_3 = 0;

					int nb_line_tReplace_3 = 0;
					int nb_line_ok_tReplace_3 = 0;

					/**
					 * [tReplace_3 begin ] stop
					 */

					/**
					 * [tReplace_2 begin ] start
					 */

					ok_Hash.put("tReplace_2", false);
					start_Hash.put("tReplace_2", System.currentTimeMillis());
					currentComponent = "tReplace_2";

					int tos_count_tReplace_2 = 0;

					int nb_line_tReplace_2 = 0;
					int nb_line_ok_tReplace_2 = 0;

					/**
					 * [tReplace_2 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_7 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_7", false);
					start_Hash.put("tFileInputDelimited_7", System
							.currentTimeMillis());
					currentComponent = "tFileInputDelimited_7";

					int tos_count_tFileInputDelimited_7 = 0;

					class RowHelper_tFileInputDelimited_7 {

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid,
								row11Struct row11) throws Exception {

							String temp = "";

							row11.subject = fid.get(0);

							row11.predicate = fid.get(1);

							row11.object = fid.get(2);

							temp = fid.get(3);
							if (temp.length() > 0) {

								row11.isLiteral = ParserUtils
										.parseTo_Boolean(temp);

							} else {

								row11.isLiteral = null;

							}

						}

					}
					RowHelper_tFileInputDelimited_7 rowHelper_tFileInputDelimited_7 = new RowHelper_tFileInputDelimited_7();

					int nb_line_tFileInputDelimited_7 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
					try {

						Object filename_tFileInputDelimited_7 = context.workPath
								+ "/triples1.tsv";
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
							if (footer_value_tFileInputDelimited_7 > 0
									|| random_value_tFileInputDelimited_7 > 0) {
								throw new Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
									context.workPath + "/triples1.tsv",
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_7 != null
								&& fid_tFileInputDelimited_7.nextRecord()) {

							row11 = null;

							boolean whetherReject_tFileInputDelimited_7 = false;
							row11 = new row11Struct();
							try {

								rowHelper_tFileInputDelimited_7.valueToConn(
										fid_tFileInputDelimited_7, row11);

							} catch (Exception e) {
								whetherReject_tFileInputDelimited_7 = true;

								System.err.println(e.getMessage());
								row11 = null;

							}

							/**
							 * [tFileInputDelimited_7 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_7 main ] start
							 */

							currentComponent = "tFileInputDelimited_7";

							tos_count_tFileInputDelimited_7++;

							/**
							 * [tFileInputDelimited_7 main ] stop
							 */
							// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tReplace_2 main ] start
								 */

								currentComponent = "tReplace_2";

								String searchStr_tReplace_2_1 = "bm:bio2rdf:"
										+ "";
								row11.subject = StringUtils.replaceAllStrictly(
										row11.subject, searchStr_tReplace_2_1,
										"http://bio2rdf.org/bio2rdf#" + "",
										false, false);
								String searchStr_tReplace_2_2 = "bm:" + "";
								row11.subject = StringUtils.replaceAllStrictly(
										row11.subject, searchStr_tReplace_2_2,
										"http://bio2rdf.org/" + "", false,
										false);
								String searchStr_tReplace_2_3 = "rdf:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_3,
												"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
														+ "", false, false);
								String searchStr_tReplace_2_4 = "rdfs:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_4,
												"http://www.w3.org/2000/01/rdf-schema#"
														+ "", false, false);
								String searchStr_tReplace_2_5 = "owl:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_5,
												"http://www.w3.org/2002/07/owl#"
														+ "", false, false);
								String searchStr_tReplace_2_6 = "dc:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_6,
												"http://purl.org/dc/elements/1.1/"
														+ "", false, false);
								String searchStr_tReplace_2_7 = "dct:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_7,
												"http://purl.org/dc/terms/"
														+ "", false, false);
								String searchStr_tReplace_2_8 = "foaf:" + "";
								row11.predicate = StringUtils
										.replaceAllStrictly(row11.predicate,
												searchStr_tReplace_2_8,
												"http://xmlns.com/foaf/0.1/"
														+ "", false, false);
								String searchStr_tReplace_2_9 = "bm:" + "";
								row11.object = StringUtils.replaceAllStrictly(
										row11.object, searchStr_tReplace_2_9,
										"http://bio2rdf.org/" + "", false,
										false);
								nb_line_ok_tReplace_2++;
								row12.subject = row11.subject;
								row12.predicate = row11.predicate;
								row12.object = row11.object;
								row12.isLiteral = row11.isLiteral;
								nb_line_tReplace_2++;

								tos_count_tReplace_2++;

								/**
								 * [tReplace_2 main ] stop
								 */

								/**
								 * [tReplace_3 main ] start
								 */

								currentComponent = "tReplace_3";

								String searchStr_tReplace_3_1 = "<" + "";
								row12.subject = StringUtils.replaceAllStrictly(
										row12.subject, searchStr_tReplace_3_1,
										"" + "", false, false);
								String searchStr_tReplace_3_2 = ">" + "";
								row12.subject = StringUtils.replaceAllStrictly(
										row12.subject, searchStr_tReplace_3_2,
										"" + "", false, false);
								String searchStr_tReplace_3_3 = " " + "";
								row12.subject = StringUtils.replaceAllStrictly(
										row12.subject, searchStr_tReplace_3_3,
										"_" + "", false, false);
								String searchStr_tReplace_3_4 = "<" + "";
								row12.predicate = StringUtils
										.replaceAllStrictly(row12.predicate,
												searchStr_tReplace_3_4,
												"" + "", false, false);
								String searchStr_tReplace_3_5 = ">" + "";
								row12.predicate = StringUtils
										.replaceAllStrictly(row12.predicate,
												searchStr_tReplace_3_5,
												"" + "", false, false);
								String searchStr_tReplace_3_6 = " " + "";
								row12.predicate = StringUtils
										.replaceAllStrictly(row12.predicate,
												searchStr_tReplace_3_6, "_"
														+ "", false, false);
								String searchStr_tReplace_3_7 = "\"" + "";
								row12.object = StringUtils.replaceAllStrictly(
										row12.object, searchStr_tReplace_3_7,
										"" + "", false, false);
								nb_line_ok_tReplace_3++;
								row13.subject = row12.subject;
								row13.predicate = row12.predicate;
								row13.object = row12.object;
								row13.isLiteral = row12.isLiteral;
								nb_line_tReplace_3++;

								tos_count_tReplace_3++;

								/**
								 * [tReplace_3 main ] stop
								 */

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables
									// ###############################
									// ###############################
									// # Output tables

									hgnc_nt = null;

									// # Output table : 'hgnc_nt'
									hgnc_nt_tmp.ntriple = "<"
											+ row13.subject
											+ "> <"
											+ row13.predicate
											+ "> "
											+ (row13.isLiteral ? "\"" : "<")
											+ (row13.isLiteral ? row13.object
													.replace("\"", "")
													: row13.object.replace(" ",
															"_"))
											+ (row13.isLiteral ? "\"" : ">")
											+ " .";
									hgnc_nt = hgnc_nt_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "hgnc_nt"
								if (hgnc_nt != null) {

									/**
									 * [tFlowMeter_19 main ] start
									 */

									currentComponent = "tFlowMeter_19";

									count_tFlowMeter_19++;

									row10 = hgnc_nt;

									tos_count_tFlowMeter_19++;

									/**
									 * [tFlowMeter_19 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();

									if (row10.ntriple != null) {

										sb_tFileOutputDelimited_7.append(

										row10.ntriple

										);

									}

									sb_tFileOutputDelimited_7
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

									nb_line_tFileOutputDelimited_7++;

									outtFileOutputDelimited_7
											.write(sb_tFileOutputDelimited_7
													.toString());

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "hgnc_nt"

							} // End of branch "row11"

							/**
							 * [tFileInputDelimited_7 end ] start
							 */

							currentComponent = "tFileInputDelimited_7";

						}
					} finally {
						if (!((Object) (context.workPath + "/triples1.tsv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_7 != null) {
								fid_tFileInputDelimited_7.close();
							}
						}
						if (fid_tFileInputDelimited_7 != null) {
							globalMap.put("tFileInputDelimited_7_NB_LINE",
									fid_tFileInputDelimited_7.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_7", true);
					end_Hash.put("tFileInputDelimited_7", System
							.currentTimeMillis());

					/**
					 * [tFileInputDelimited_7 end ] stop
					 */

					/**
					 * [tReplace_2 end ] start
					 */

					currentComponent = "tReplace_2";

					globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);
					globalMap.put("tReplace_2_NB_LINE_OK",
							nb_line_ok_tReplace_2);

					ok_Hash.put("tReplace_2", true);
					end_Hash.put("tReplace_2", System.currentTimeMillis());

					/**
					 * [tReplace_2 end ] stop
					 */

					/**
					 * [tReplace_3 end ] start
					 */

					currentComponent = "tReplace_3";

					globalMap.put("tReplace_3_NB_LINE", nb_line_tReplace_3);
					globalMap.put("tReplace_3_NB_LINE_OK",
							nb_line_ok_tReplace_3);

					ok_Hash.put("tReplace_3", true);
					end_Hash.put("tReplace_3", System.currentTimeMillis());

					/**
					 * [tReplace_3 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFlowMeter_19 end ] start
					 */

					currentComponent = "tFlowMeter_19";

					tFlowMeterCatcher_1.addMessage("hgnc_nt", new Integer(
							count_tFlowMeter_19), "null", "", "tFlowMeter_19");

					ok_Hash.put("tFlowMeter_19", true);
					end_Hash.put("tFlowMeter_19", System.currentTimeMillis());

					/**
					 * [tFlowMeter_19 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 end ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

				} finally {
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
					globalMap.put("tFileOutputDelimited_7_NB_LINE",
							nb_line_tFileOutputDelimited_7);
					globalMap.put("tFileOutputDelimited_7_FILE_NAME",
							fileName_tFileOutputDelimited_7);
				} // finally

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System
						.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());
				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth,
							int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_3";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null
									&& row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 17;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth
								- title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "moment");
						for (int i = 0; i < titleWidth - "moment".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null
								&& i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "pid");
						for (int i = 0; i < titleWidth - "pid".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null
								&& i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "father_pid");
						for (int i = 0; i < titleWidth - "father_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null
								&& i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "root_pid");
						for (int i = 0; i < titleWidth - "root_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null
								&& i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "system_pid");
						for (int i = 0; i < titleWidth - "system_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[4]);
						for (int i = 0; row[4] == null && i < dataWidth - 3
								|| row[4] != null
								&& i < dataWidth - row[4].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "project");
						for (int i = 0; i < titleWidth - "project".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[5]);
						for (int i = 0; row[5] == null && i < dataWidth - 3
								|| row[5] != null
								&& i < dataWidth - row[5].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job");
						for (int i = 0; i < titleWidth - "job".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[6]);
						for (int i = 0; row[6] == null && i < dataWidth - 3
								|| row[6] != null
								&& i < dataWidth - row[6].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_repository_id");
						for (int i = 0; i < titleWidth
								- "job_repository_id".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[7]);
						for (int i = 0; row[7] == null && i < dataWidth - 3
								|| row[7] != null
								&& i < dataWidth - row[7].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_version");
						for (int i = 0; i < titleWidth - "job_version".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[8]);
						for (int i = 0; row[8] == null && i < dataWidth - 3
								|| row[8] != null
								&& i < dataWidth - row[8].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "context");
						for (int i = 0; i < titleWidth - "context".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[9]);
						for (int i = 0; row[9] == null && i < dataWidth - 3
								|| row[9] != null
								&& i < dataWidth - row[9].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "origin");
						for (int i = 0; i < titleWidth - "origin".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[10]);
						for (int i = 0; row[10] == null && i < dataWidth - 3
								|| row[10] != null
								&& i < dataWidth - row[10].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "label");
						for (int i = 0; i < titleWidth - "label".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[11]);
						for (int i = 0; row[11] == null && i < dataWidth - 3
								|| row[11] != null
								&& i < dataWidth - row[11].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "count");
						for (int i = 0; i < titleWidth - "count".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[12]);
						for (int i = 0; row[12] == null && i < dataWidth - 3
								|| row[12] != null
								&& i < dataWidth - row[12].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "reference");
						for (int i = 0; i < titleWidth - "reference".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[13]);
						for (int i = 0; row[13] == null && i < dataWidth - 3
								|| row[13] != null
								&& i < dataWidth - row[13].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "thresholds");
						for (int i = 0; i < titleWidth - "thresholds".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[14]);
						for (int i = 0; row[14] == null && i < dataWidth - 3
								|| row[14] != null
								&& i < dataWidth - row[14].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System
						.currentTimeMillis());
				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row16.pid = pid;
					row16.root_pid = rootPid;
					row16.father_pid = fatherPid;
					row16.project = projectName;
					row16.job = jobName;
					row16.context = contextStr;
					row16.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row16.moment = mcm.getMoment();
					row16.job_version = mcm.getJobVersion();
					row16.job_repository_id = mcm.getJobId();
					row16.system_pid = mcm.getSystemPid();
					row16.label = mcm.getLabel();
					row16.count = mcm.getCount();
					row16.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense()
							+ "_count");
					row16.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */
					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_3 main ] start
					 */

					currentComponent = "tLogRow_3";

					// /////////////////////

					strBuffer_tLogRow_3 = new StringBuilder();

					if (row16.moment != null) { //

						strBuffer_tLogRow_3.append(FormatterUtils.format_Date(
								row16.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row16.pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.father_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.father_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.root_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.root_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.system_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.system_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.project != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.project));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.job != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row16.job));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.job_repository_id != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.job_repository_id));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.job_version != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.job_version));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.context != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.context));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.origin != null) { //

						strBuffer_tLogRow_3
								.append(String.valueOf(row16.origin));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.label != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row16.label));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.count != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row16.count));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.reference != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.reference));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row16.thresholds != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row16.thresholds));

					} //

					String[] row_tLogRow_3 = new String[15];

					if (row16.moment != null) { //
						row_tLogRow_3[0] = FormatterUtils.format_Date(
								row16.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row16.pid != null) { //
						row_tLogRow_3[1] = String.valueOf(row16.pid);

					} //

					if (row16.father_pid != null) { //
						row_tLogRow_3[2] = String.valueOf(row16.father_pid);

					} //

					if (row16.root_pid != null) { //
						row_tLogRow_3[3] = String.valueOf(row16.root_pid);

					} //

					if (row16.system_pid != null) { //
						row_tLogRow_3[4] = String.valueOf(row16.system_pid);

					} //

					if (row16.project != null) { //
						row_tLogRow_3[5] = String.valueOf(row16.project);

					} //

					if (row16.job != null) { //
						row_tLogRow_3[6] = String.valueOf(row16.job);

					} //

					if (row16.job_repository_id != null) { //
						row_tLogRow_3[7] = String
								.valueOf(row16.job_repository_id);

					} //

					if (row16.job_version != null) { //
						row_tLogRow_3[8] = String.valueOf(row16.job_version);

					} //

					if (row16.context != null) { //
						row_tLogRow_3[9] = String.valueOf(row16.context);

					} //

					if (row16.origin != null) { //
						row_tLogRow_3[10] = String.valueOf(row16.origin);

					} //

					if (row16.label != null) { //
						row_tLogRow_3[11] = String.valueOf(row16.label);

					} //

					if (row16.count != null) { //
						row_tLogRow_3[12] = String.valueOf(row16.count);

					} //

					if (row16.reference != null) { //
						row_tLogRow_3[13] = String.valueOf(row16.reference);

					} //

					if (row16.thresholds != null) { //
						row_tLogRow_3[14] = String.valueOf(row16.thresholds);

					} //

					nb_line_tLogRow_3++;
					consoleOut_tLogRow_3.println(util_tLogRow_3.print(
							row_tLogRow_3, nb_line_tLogRow_3));
					consoleOut_tLogRow_3.flush();
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_3++;

					/**
					 * [tLogRow_3 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hgnc_4_triples hgnc_4_triplesClass = new hgnc_4_triples();

		int exitCode = hgnc_4_triplesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = hgnc_4_triples.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/hgnc_4_triples_1_0/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

				context.workPath = (String) context.getProperty("workPath");

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("workPath")) {
				context.workPath = (String) parentContextMap.get("workPath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			status = "failure";
			e_tFileInputDelimited_5.printStackTrace();
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : hgnc_4_triples");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index),
						replaceEscapeChars(keyValue.substring(index + 1)));
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 240847 characters generated by Talend Open Studio for Data Integration on the
 * 25 avril 2012 14:25:49 EDT
 ************************************************************************************************/
