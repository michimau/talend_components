// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.0.1.r74687)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package bio2rdf.hgnc_2_genefamily_1_0;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: hgnc_2_geneFamily Purpose: <br>
 * Description: <br>
 * 
 * @author test@talend.com
 * @version 5.0.1.r74687
 * @status PROD
 */
public class hgnc_2_geneFamily implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (workPath != null) {

				this.setProperty("workPath", workPath.toString());

			}

		}

		public String workPath;

		public String getWorkPath() {
			return this.workPath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "hgnc_2_geneFamily";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_kab-oAA2EeGWfvGJKqgYbQ", "1.0");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hgnc_2_geneFamily.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hgnc_2_geneFamily.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_15", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_12", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_3", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class genefam1Struct implements
			routines.system.IPersistableRow<genefam1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(genefam1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String identifier;

		public String getIdentifier() {
			return this.identifier;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String xHGNC;

		public String getXHGNC() {
			return this.xHGNC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.url = readString(dis);

					this.identifier = readString(dis);

					this.title = readString(dis);

					this.label = readString(dis);

					this.xHGNC = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.url, dos);

				// String

				writeString(this.identifier, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.xHGNC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",url=" + url);
			sb.append(",identifier=" + identifier);
			sb.append(",title=" + title);
			sb.append(",label=" + label);
			sb.append(",xHGNC=" + xHGNC);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class genefam2Struct implements
			routines.system.IPersistableRow<genefam2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(genefam2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean isLiteral;

		public Boolean getIsLiteral() {
			return this.isLiteral;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isLiteral = null;
					} else {
						this.isLiteral = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.isLiteral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isLiteral);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",isLiteral=" + String.valueOf(isLiteral));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String identifier;

		public String getIdentifier() {
			return this.identifier;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String xHGNC;

		public String getXHGNC() {
			return this.xHGNC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.url = readString(dis);

					this.identifier = readString(dis);

					this.title = readString(dis);

					this.label = readString(dis);

					this.xHGNC = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.url, dos);

				// String

				writeString(this.identifier, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.xHGNC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",url=" + url);
			sb.append(",identifier=" + identifier);
			sb.append(",title=" + title);
			sb.append(",label=" + label);
			sb.append(",xHGNC=" + xHGNC);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String identifier;

		public String getIdentifier() {
			return this.identifier;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String xHGNC;

		public String getXHGNC() {
			return this.xHGNC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.url = readString(dis);

					this.identifier = readString(dis);

					this.title = readString(dis);

					this.label = readString(dis);

					this.xHGNC = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.url, dos);

				// String

				writeString(this.identifier, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.xHGNC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",url=" + url);
			sb.append(",identifier=" + identifier);
			sb.append(",title=" + title);
			sb.append(",label=" + label);
			sb.append(",xHGNC=" + xHGNC);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String identifier;

		public String getIdentifier() {
			return this.identifier;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String xHGNC;

		public String getXHGNC() {
			return this.xHGNC;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.url = readString(dis);

					this.identifier = readString(dis);

					this.title = readString(dis);

					this.label = readString(dis);

					this.xHGNC = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.url, dos);

				// String

				writeString(this.identifier, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.xHGNC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",url=" + url);
			sb.append(",identifier=" + identifier);
			sb.append(",title=" + title);
			sb.append(",label=" + label);
			sb.append(",xHGNC=" + xHGNC);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String URL;

		public String getURL() {
			return this.URL;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.URL = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.Symbol = readString(dis);

					this.HGNC_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.URL, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.HGNC_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("URL=" + URL);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",Symbol=" + Symbol);
			sb.append(",HGNC_ID=" + HGNC_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				row3Struct row3 = new row3Struct();
				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();
				row5Struct genefam1 = row5;
				row5Struct row10 = row5;
				row6Struct row6 = new row6Struct();
				row4Struct row4 = new row4Struct();
				row4Struct genefam2 = row4;
				row4Struct row9 = row4;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workPath + "genefam1.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFlowMeter_15 begin ] start
					 */

					ok_Hash.put("tFlowMeter_15", false);
					start_Hash.put("tFlowMeter_15", System.currentTimeMillis());
					currentComponent = "tFlowMeter_15";

					int tos_count_tFlowMeter_15 = 0;

					int count_tFlowMeter_15 = 0;

					/**
					 * [tFlowMeter_15 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());
					currentComponent = "tLogRow_1";

					int tos_count_tLogRow_1 = 0;

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tSplitRow_1 begin ] start
					 */

					ok_Hash.put("tSplitRow_1", false);
					start_Hash.put("tSplitRow_1", System.currentTimeMillis());
					currentComponent = "tSplitRow_1";

					int tos_count_tSplitRow_1 = 0;
					int nb_line_tSplitRow_1 = 0;

					/**
					 * [tSplitRow_1 begin ] stop
					 */

					/**
					 * [tUniqRow_1 begin ] start
					 */

					ok_Hash.put("tUniqRow_1", false);
					start_Hash.put("tUniqRow_1", System.currentTimeMillis());
					currentComponent = "tUniqRow_1";

					int tos_count_tUniqRow_1 = 0;

					class KeyStruct_tUniqRow_1 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String subject;
						String identifier;
						String title;
						String label;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.subject == null) ? 0
												: this.subject.hashCode());

								result = prime
										* result
										+ ((this.identifier == null) ? 0
												: this.identifier.hashCode());

								result = prime
										* result
										+ ((this.title == null) ? 0
												: this.title.hashCode());

								result = prime
										* result
										+ ((this.label == null) ? 0
												: this.label.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

							if (this.subject == null) {
								if (other.subject != null)
									return false;
							} else if (!this.subject.equals(other.subject))
								return false;

							if (this.identifier == null) {
								if (other.identifier != null)
									return false;
							} else if (!this.identifier
									.equals(other.identifier))
								return false;

							if (this.title == null) {
								if (other.title != null)
									return false;
							} else if (!this.title.equals(other.title))
								return false;

							if (this.label == null) {
								if (other.label != null)
									return false;
							} else if (!this.label.equals(other.label))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_1 = 0;
					int nb_duplicates_tUniqRow_1 = 0;
					KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
					java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

					/**
					 * [tUniqRow_1 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_2", false);
					start_Hash.put("tFileOutputDelimited_2", System
							.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_2";

					int tos_count_tFileOutputDelimited_2 = 0;

					String fileName_tFileOutputDelimited_2 = "";
					fileName_tFileOutputDelimited_2 = (new java.io.File(
							context.workPath + "genefam2.tsv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_2 = null;
					String extension_tFileOutputDelimited_2 = null;
					String directory_tFileOutputDelimited_2 = null;
					if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						}
						directory_tFileOutputDelimited_2 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_2 = true;
					java.io.File filetFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);

					int nb_line_tFileOutputDelimited_2 = 0;
					int splitEvery_tFileOutputDelimited_2 = 1000;
					int splitedFileNo_tFileOutputDelimited_2 = 0;
					int currentRow_tFileOutputDelimited_2 = 0;

					final String OUT_DELIM_tFileOutputDelimited_2 = /**
					 * Start
					 * field tFileOutputDelimited_2:FIELDSEPARATOR
					 */
					"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
					 * 
					 * Start field tFileOutputDelimited_2:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_2 != null
							&& directory_tFileOutputDelimited_2.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
								directory_tFileOutputDelimited_2);
						if (!dir_tFileOutputDelimited_2.exists()) {
							dir_tFileOutputDelimited_2.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_2 = null;
					try {
						outtFileOutputDelimited_2 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), "ISO-8859-15"));

						/**
						 * [tFileOutputDelimited_2 begin ] stop
						 */

						/**
						 * [tFlowMeter_12 begin ] start
						 */

						ok_Hash.put("tFlowMeter_12", false);
						start_Hash.put("tFlowMeter_12", System
								.currentTimeMillis());
						currentComponent = "tFlowMeter_12";

						int tos_count_tFlowMeter_12 = 0;

						int count_tFlowMeter_12 = 0;

						/**
						 * [tFlowMeter_12 begin ] stop
						 */

						/**
						 * [tLogRow_2 begin ] start
						 */

						ok_Hash.put("tLogRow_2", false);
						start_Hash.put("tLogRow_2", System.currentTimeMillis());
						currentComponent = "tLogRow_2";

						int tos_count_tLogRow_2 = 0;

						/**
						 * [tLogRow_2 begin ] stop
						 */

						/**
						 * [tSplitRow_2 begin ] start
						 */

						ok_Hash.put("tSplitRow_2", false);
						start_Hash.put("tSplitRow_2", System
								.currentTimeMillis());
						currentComponent = "tSplitRow_2";

						int tos_count_tSplitRow_2 = 0;
						int nb_line_tSplitRow_2 = 0;

						/**
						 * [tSplitRow_2 begin ] stop
						 */

						/**
						 * [tReplicate_1 begin ] start
						 */

						ok_Hash.put("tReplicate_1", false);
						start_Hash.put("tReplicate_1", System
								.currentTimeMillis());
						currentComponent = "tReplicate_1";

						int tos_count_tReplicate_1 = 0;

						/**
						 * [tReplicate_1 begin ] stop
						 */

						/**
						 * [tMap_1 begin ] start
						 */

						ok_Hash.put("tMap_1", false);
						start_Hash.put("tMap_1", System.currentTimeMillis());
						currentComponent = "tMap_1";

						int tos_count_tMap_1 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_1__Struct {
							String nsid;
							String label;
							String subject;
						}
						Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						out1Struct out1_tmp = new out1Struct();
						// ###############################

						/**
						 * [tMap_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_1", false);
						start_Hash.put("tFileInputDelimited_1", System
								.currentTimeMillis());
						currentComponent = "tFileInputDelimited_1";

						int tos_count_tFileInputDelimited_1 = 0;

						class RowHelper_tFileInputDelimited_1 {

							public void valueToConn(
									org.talend.fileprocess.FileInputDelimited fid,
									row1Struct row1) throws Exception {

								row1.URL = fid.get(0);

								row1.GeneFamilyTag = fid.get(1);

								row1.GeneFamilyDescription = fid.get(2);

								row1.Symbol = fid.get(3);

								row1.HGNC_ID = fid.get(4);

							}

						}
						RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

						int nb_line_tFileInputDelimited_1 = 0;
						org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
						try {

							Object filename_tFileInputDelimited_1 = context.workPath
									+ "genefam_list.tab";
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
								if (footer_value_tFileInputDelimited_1 > 0
										|| random_value_tFileInputDelimited_1 > 0) {
									throw new Exception(
											"When the input source is a stream,footer and random shouldn't be bigger than 0.");
								}

							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
										context.workPath + "genefam_list.tab",
										"ISO-8859-15", "\t", "\n", true, 1, 0,
										-1, -1, false);
							} catch (Exception e) {

								System.err.println(e.getMessage());

							}

							while (fid_tFileInputDelimited_1 != null
									&& fid_tFileInputDelimited_1.nextRecord()) {

								row1 = null;

								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {

									rowHelper_tFileInputDelimited_1
											.valueToConn(
													fid_tFileInputDelimited_1,
													row1);

								} catch (Exception e) {
									whetherReject_tFileInputDelimited_1 = true;

									System.err.println(e.getMessage());
									row1 = null;

								}

								/**
								 * [tFileInputDelimited_1 begin ] stop
								 */
								/**
								 * [tFileInputDelimited_1 main ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								tos_count_tFileInputDelimited_1++;

								/**
								 * [tFileInputDelimited_1 main ] stop
								 */
								// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;
										Var.nsid = "hgnc:geneFamily:"
												+ row1.GeneFamilyTag;
										Var.label = row1.GeneFamilyDescription
												+ " [" + Var.nsid + "]";
										Var.subject = "bm:" + Var.nsid;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										// # Output table : 'out1'
										out1_tmp.subject = Var.subject;
										out1_tmp.url = row1.URL;
										out1_tmp.identifier = Var.nsid;
										out1_tmp.title = row1.GeneFamilyDescription;
										out1_tmp.label = Var.label;
										out1_tmp.xHGNC = row1.HGNC_ID;
										out1 = out1_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tReplicate_1 main ] start
										 */

										currentComponent = "tReplicate_1";

										row3 = new row3Struct();

										row3.subject = out1.subject;
										row3.url = out1.url;
										row3.identifier = out1.identifier;
										row3.title = out1.title;
										row3.label = out1.label;
										row3.xHGNC = out1.xHGNC;
										row6 = new row6Struct();

										row6.subject = out1.subject;
										row6.url = out1.url;
										row6.identifier = out1.identifier;
										row6.title = out1.title;
										row6.label = out1.label;
										row6.xHGNC = out1.xHGNC;

										tos_count_tReplicate_1++;

										/**
										 * [tReplicate_1 main ] stop
										 */

										/**
										 * [tUniqRow_1 main ] start
										 */

										currentComponent = "tUniqRow_1";

										row2 = null;
										if (row3.subject == null) {
											finder_tUniqRow_1.subject = null;
										} else {
											finder_tUniqRow_1.subject = row3.subject
													.toLowerCase();
										}
										if (row3.identifier == null) {
											finder_tUniqRow_1.identifier = null;
										} else {
											finder_tUniqRow_1.identifier = row3.identifier
													.toLowerCase();
										}
										if (row3.title == null) {
											finder_tUniqRow_1.title = null;
										} else {
											finder_tUniqRow_1.title = row3.title
													.toLowerCase();
										}
										if (row3.label == null) {
											finder_tUniqRow_1.label = null;
										} else {
											finder_tUniqRow_1.label = row3.label
													.toLowerCase();
										}
										finder_tUniqRow_1.hashCodeDirty = true;
										if (!keystUniqRow_1
												.contains(finder_tUniqRow_1)) {
											KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

											if (row3.subject == null) {
												new_tUniqRow_1.subject = null;
											} else {
												new_tUniqRow_1.subject = row3.subject
														.toLowerCase();
											}
											if (row3.identifier == null) {
												new_tUniqRow_1.identifier = null;
											} else {
												new_tUniqRow_1.identifier = row3.identifier
														.toLowerCase();
											}
											if (row3.title == null) {
												new_tUniqRow_1.title = null;
											} else {
												new_tUniqRow_1.title = row3.title
														.toLowerCase();
											}
											if (row3.label == null) {
												new_tUniqRow_1.label = null;
											} else {
												new_tUniqRow_1.label = row3.label
														.toLowerCase();
											}

											keystUniqRow_1.add(new_tUniqRow_1);
											if (row2 == null) {
												row2 = new row2Struct();
											}
											row2.subject = row3.subject;
											row2.url = row3.url;
											row2.identifier = row3.identifier;
											row2.title = row3.title;
											row2.label = row3.label;
											row2.xHGNC = row3.xHGNC;
											nb_uniques_tUniqRow_1++;
										} else {
											nb_duplicates_tUniqRow_1++;
										}

										tos_count_tUniqRow_1++;

										/**
										 * [tUniqRow_1 main ] stop
										 */
										// Start of branch "row2"
										if (row2 != null) {

											/**
											 * [tSplitRow_1 main ] start
											 */

											currentComponent = "tSplitRow_1";

											java.util.List<row5Struct> rows_tSplitRow_1 = new java.util.ArrayList<row5Struct>(
													5);
											row5Struct rowTmp_tSplitRow_1 = null;

											// cache output rows for the loop
											rowTmp_tSplitRow_1 = new row5Struct();

											rowTmp_tSplitRow_1.subject = row2.subject;
											rowTmp_tSplitRow_1.predicate = "dc:identifier";
											rowTmp_tSplitRow_1.object = row2.identifier;
											rowTmp_tSplitRow_1.isLiteral = true;
											rows_tSplitRow_1
													.add(rowTmp_tSplitRow_1);
											nb_line_tSplitRow_1++;
											rowTmp_tSplitRow_1 = new row5Struct();

											rowTmp_tSplitRow_1.subject = row2.subject;
											rowTmp_tSplitRow_1.predicate = "rdf:type";
											rowTmp_tSplitRow_1.object = "bm:hgnc_vocabulary:GeneFamilly";
											rowTmp_tSplitRow_1.isLiteral = false;
											rows_tSplitRow_1
													.add(rowTmp_tSplitRow_1);
											nb_line_tSplitRow_1++;
											rowTmp_tSplitRow_1 = new row5Struct();

											rowTmp_tSplitRow_1.subject = row2.subject;
											rowTmp_tSplitRow_1.predicate = "rdfs:label";
											rowTmp_tSplitRow_1.object = row2.label;
											rowTmp_tSplitRow_1.isLiteral = true;
											rows_tSplitRow_1
													.add(rowTmp_tSplitRow_1);
											nb_line_tSplitRow_1++;
											rowTmp_tSplitRow_1 = new row5Struct();

											rowTmp_tSplitRow_1.subject = row2.subject;
											rowTmp_tSplitRow_1.predicate = "dc:title";
											rowTmp_tSplitRow_1.object = row2.title;
											rowTmp_tSplitRow_1.isLiteral = true;
											rows_tSplitRow_1
													.add(rowTmp_tSplitRow_1);
											nb_line_tSplitRow_1++;
											rowTmp_tSplitRow_1 = new row5Struct();

											rowTmp_tSplitRow_1.subject = row2.subject;
											rowTmp_tSplitRow_1.predicate = "bio2rdf:url";
											rowTmp_tSplitRow_1.object = row2.url;
											rowTmp_tSplitRow_1.isLiteral = true;
											rows_tSplitRow_1
													.add(rowTmp_tSplitRow_1);
											nb_line_tSplitRow_1++;

											for (row5Struct row_tSplitRow_1 : rows_tSplitRow_1) {// C_01
												row5 = row_tSplitRow_1;

												tos_count_tSplitRow_1++;

												/**
												 * [tSplitRow_1 main ] stop
												 */
												// Start of branch "row5"
												if (row5 != null) {

													/**
													 * [tLogRow_1 main ] start
													 */

													currentComponent = "tLogRow_1";

													genefam1 = row5;

													tos_count_tLogRow_1++;

													/**
													 * [tLogRow_1 main ] stop
													 */

													/**
													 * [tFlowMeter_15 main ]
													 * start
													 */

													currentComponent = "tFlowMeter_15";

													count_tFlowMeter_15++;

													row10 = genefam1;

													tos_count_tFlowMeter_15++;

													/**
													 * [tFlowMeter_15 main ]
													 * stop
													 */

													/**
													 * [tFileOutputDelimited_1
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_1";

													StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

													if (row10.subject != null) {

														sb_tFileOutputDelimited_1
																.append(

																row10.subject

																);

													}

													sb_tFileOutputDelimited_1
															.append(OUT_DELIM_tFileOutputDelimited_1);

													if (row10.predicate != null) {

														sb_tFileOutputDelimited_1
																.append(

																row10.predicate

																);

													}

													sb_tFileOutputDelimited_1
															.append(OUT_DELIM_tFileOutputDelimited_1);

													if (row10.object != null) {

														sb_tFileOutputDelimited_1
																.append(

																row10.object

																);

													}

													sb_tFileOutputDelimited_1
															.append(OUT_DELIM_tFileOutputDelimited_1);

													if (row10.isLiteral != null) {

														sb_tFileOutputDelimited_1
																.append(

																row10.isLiteral

																);

													}

													sb_tFileOutputDelimited_1
															.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

													nb_line_tFileOutputDelimited_1++;

													outtFileOutputDelimited_1
															.write(sb_tFileOutputDelimited_1
																	.toString());

													tos_count_tFileOutputDelimited_1++;

													/**
													 * [tFileOutputDelimited_1
													 * main ] stop
													 */

												} // End of branch "row5"

											} // C_01

										} // End of branch "row2"

										/**
										 * [tSplitRow_2 main ] start
										 */

										currentComponent = "tSplitRow_2";

										java.util.List<row4Struct> rows_tSplitRow_2 = new java.util.ArrayList<row4Struct>(
												1);
										row4Struct rowTmp_tSplitRow_2 = null;

										// cache output rows for the loop
										rowTmp_tSplitRow_2 = new row4Struct();

										rowTmp_tSplitRow_2.subject = row6.subject;
										rowTmp_tSplitRow_2.predicate = "bio2rdf:xHGNC";
										rowTmp_tSplitRow_2.object = "bm:hgnc:"
												+ row6.xHGNC;
										rowTmp_tSplitRow_2.isLiteral = false;
										rows_tSplitRow_2
												.add(rowTmp_tSplitRow_2);
										nb_line_tSplitRow_2++;

										for (row4Struct row_tSplitRow_2 : rows_tSplitRow_2) {// C_01
											row4 = row_tSplitRow_2;

											tos_count_tSplitRow_2++;

											/**
											 * [tSplitRow_2 main ] stop
											 */
											// Start of branch "row4"
											if (row4 != null) {

												/**
												 * [tLogRow_2 main ] start
												 */

												currentComponent = "tLogRow_2";

												genefam2 = row4;

												tos_count_tLogRow_2++;

												/**
												 * [tLogRow_2 main ] stop
												 */

												/**
												 * [tFlowMeter_12 main ] start
												 */

												currentComponent = "tFlowMeter_12";

												count_tFlowMeter_12++;

												row9 = genefam2;

												tos_count_tFlowMeter_12++;

												/**
												 * [tFlowMeter_12 main ] stop
												 */

												/**
												 * [tFileOutputDelimited_2 main
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_2";

												StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

												if (row9.subject != null) {

													sb_tFileOutputDelimited_2
															.append(

															row9.subject

															);

												}

												sb_tFileOutputDelimited_2
														.append(OUT_DELIM_tFileOutputDelimited_2);

												if (row9.predicate != null) {

													sb_tFileOutputDelimited_2
															.append(

															row9.predicate

															);

												}

												sb_tFileOutputDelimited_2
														.append(OUT_DELIM_tFileOutputDelimited_2);

												if (row9.object != null) {

													sb_tFileOutputDelimited_2
															.append(

															row9.object

															);

												}

												sb_tFileOutputDelimited_2
														.append(OUT_DELIM_tFileOutputDelimited_2);

												if (row9.isLiteral != null) {

													sb_tFileOutputDelimited_2
															.append(

															row9.isLiteral

															);

												}

												sb_tFileOutputDelimited_2
														.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

												nb_line_tFileOutputDelimited_2++;

												outtFileOutputDelimited_2
														.write(sb_tFileOutputDelimited_2
																.toString());

												tos_count_tFileOutputDelimited_2++;

												/**
												 * [tFileOutputDelimited_2 main
												 * ] stop
												 */

											} // End of branch "row4"

										} // C_01

									} // End of branch "out1"

								} // End of branch "row1"

								/**
								 * [tFileInputDelimited_1 end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

							}
						} finally {
							if (!((Object) (context.workPath + "genefam_list.tab") instanceof java.io.InputStream)) {
								if (fid_tFileInputDelimited_1 != null) {
									fid_tFileInputDelimited_1.close();
								}
							}
							if (fid_tFileInputDelimited_1 != null) {
								globalMap.put("tFileInputDelimited_1_NB_LINE",
										fid_tFileInputDelimited_1
												.getRowNumber());
							}
						}

						ok_Hash.put("tFileInputDelimited_1", true);
						end_Hash.put("tFileInputDelimited_1", System
								.currentTimeMillis());

						/**
						 * [tFileInputDelimited_1 end ] stop
						 */

						/**
						 * [tMap_1 end ] start
						 */

						currentComponent = "tMap_1";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_1", true);
						end_Hash.put("tMap_1", System.currentTimeMillis());

						/**
						 * [tMap_1 end ] stop
						 */

						/**
						 * [tReplicate_1 end ] start
						 */

						currentComponent = "tReplicate_1";

						ok_Hash.put("tReplicate_1", true);
						end_Hash.put("tReplicate_1", System.currentTimeMillis());

						/**
						 * [tReplicate_1 end ] stop
						 */

						/**
						 * [tSplitRow_2 end ] start
						 */

						currentComponent = "tSplitRow_2";

						globalMap.put("tSplitRow_2_NB_LINE",
								nb_line_tSplitRow_2);

						ok_Hash.put("tSplitRow_2", true);
						end_Hash.put("tSplitRow_2", System.currentTimeMillis());

						/**
						 * [tSplitRow_2 end ] stop
						 */

						/**
						 * [tLogRow_2 end ] start
						 */

						currentComponent = "tLogRow_2";

						ok_Hash.put("tLogRow_2", true);
						end_Hash.put("tLogRow_2", System.currentTimeMillis());

						/**
						 * [tLogRow_2 end ] stop
						 */

						/**
						 * [tFlowMeter_12 end ] start
						 */

						currentComponent = "tFlowMeter_12";

						tFlowMeterCatcher_1.addMessage("genefam2", new Integer(
								count_tFlowMeter_12), "null", "",
								"tFlowMeter_12");

						ok_Hash.put("tFlowMeter_12", true);
						end_Hash.put("tFlowMeter_12", System
								.currentTimeMillis());

						/**
						 * [tFlowMeter_12 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

					} finally {
						if (outtFileOutputDelimited_2 != null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
						globalMap.put("tFileOutputDelimited_2_NB_LINE",
								nb_line_tFileOutputDelimited_2);
						globalMap.put("tFileOutputDelimited_2_FILE_NAME",
								fileName_tFileOutputDelimited_2);
					} // finally

					ok_Hash.put("tFileOutputDelimited_2", true);
					end_Hash.put("tFileOutputDelimited_2", System
							.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_2 end ] stop
					 */

					/**
					 * [tUniqRow_1 end ] start
					 */

					currentComponent = "tUniqRow_1";

					globalMap.put("tUniqRow_1_NB_UNIQUES",
							nb_uniques_tUniqRow_1);
					globalMap.put("tUniqRow_1_NB_DUPLICATES",
							nb_duplicates_tUniqRow_1);

					ok_Hash.put("tUniqRow_1", true);
					end_Hash.put("tUniqRow_1", System.currentTimeMillis());

					/**
					 * [tUniqRow_1 end ] stop
					 */

					/**
					 * [tSplitRow_1 end ] start
					 */

					currentComponent = "tSplitRow_1";

					globalMap.put("tSplitRow_1_NB_LINE", nb_line_tSplitRow_1);

					ok_Hash.put("tSplitRow_1", true);
					end_Hash.put("tSplitRow_1", System.currentTimeMillis());

					/**
					 * [tSplitRow_1 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tFlowMeter_15 end ] start
					 */

					currentComponent = "tFlowMeter_15";

					tFlowMeterCatcher_1.addMessage("genefam1", new Integer(
							count_tFlowMeter_15), "null", "", "tFlowMeter_15");

					ok_Hash.put("tFlowMeter_15", true);
					end_Hash.put("tFlowMeter_15", System.currentTimeMillis());

					/**
					 * [tFlowMeter_15 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System
						.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());
				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth,
							int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_3";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null
									&& row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 17;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth
								- title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "moment");
						for (int i = 0; i < titleWidth - "moment".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null
								&& i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "pid");
						for (int i = 0; i < titleWidth - "pid".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null
								&& i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "father_pid");
						for (int i = 0; i < titleWidth - "father_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null
								&& i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "root_pid");
						for (int i = 0; i < titleWidth - "root_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null
								&& i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "system_pid");
						for (int i = 0; i < titleWidth - "system_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[4]);
						for (int i = 0; row[4] == null && i < dataWidth - 3
								|| row[4] != null
								&& i < dataWidth - row[4].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "project");
						for (int i = 0; i < titleWidth - "project".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[5]);
						for (int i = 0; row[5] == null && i < dataWidth - 3
								|| row[5] != null
								&& i < dataWidth - row[5].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job");
						for (int i = 0; i < titleWidth - "job".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[6]);
						for (int i = 0; row[6] == null && i < dataWidth - 3
								|| row[6] != null
								&& i < dataWidth - row[6].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_repository_id");
						for (int i = 0; i < titleWidth
								- "job_repository_id".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[7]);
						for (int i = 0; row[7] == null && i < dataWidth - 3
								|| row[7] != null
								&& i < dataWidth - row[7].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_version");
						for (int i = 0; i < titleWidth - "job_version".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[8]);
						for (int i = 0; row[8] == null && i < dataWidth - 3
								|| row[8] != null
								&& i < dataWidth - row[8].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "context");
						for (int i = 0; i < titleWidth - "context".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[9]);
						for (int i = 0; row[9] == null && i < dataWidth - 3
								|| row[9] != null
								&& i < dataWidth - row[9].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "origin");
						for (int i = 0; i < titleWidth - "origin".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[10]);
						for (int i = 0; row[10] == null && i < dataWidth - 3
								|| row[10] != null
								&& i < dataWidth - row[10].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "label");
						for (int i = 0; i < titleWidth - "label".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[11]);
						for (int i = 0; row[11] == null && i < dataWidth - 3
								|| row[11] != null
								&& i < dataWidth - row[11].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "count");
						for (int i = 0; i < titleWidth - "count".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[12]);
						for (int i = 0; row[12] == null && i < dataWidth - 3
								|| row[12] != null
								&& i < dataWidth - row[12].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "reference");
						for (int i = 0; i < titleWidth - "reference".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[13]);
						for (int i = 0; row[13] == null && i < dataWidth - 3
								|| row[13] != null
								&& i < dataWidth - row[13].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "thresholds");
						for (int i = 0; i < titleWidth - "thresholds".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[14]);
						for (int i = 0; row[14] == null && i < dataWidth - 3
								|| row[14] != null
								&& i < dataWidth - row[14].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System
						.currentTimeMillis());
				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;
					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;
					row7.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row7.moment = mcm.getMoment();
					row7.job_version = mcm.getJobVersion();
					row7.job_repository_id = mcm.getJobId();
					row7.system_pid = mcm.getSystemPid();
					row7.label = mcm.getLabel();
					row7.count = mcm.getCount();
					row7.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense()
							+ "_count");
					row7.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */
					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_3 main ] start
					 */

					currentComponent = "tLogRow_3";

					// /////////////////////

					strBuffer_tLogRow_3 = new StringBuilder();

					if (row7.moment != null) { //

						strBuffer_tLogRow_3.append(FormatterUtils.format_Date(
								row7.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.pid != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row7.pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.father_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.father_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.root_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.root_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.system_pid != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.system_pid));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.project != null) { //

						strBuffer_tLogRow_3
								.append(String.valueOf(row7.project));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.job != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row7.job));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.job_repository_id != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.job_repository_id));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.job_version != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.job_version));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.context != null) { //

						strBuffer_tLogRow_3
								.append(String.valueOf(row7.context));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.origin != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row7.origin));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.label != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row7.label));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.count != null) { //

						strBuffer_tLogRow_3.append(String.valueOf(row7.count));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.reference != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.reference));

					} //

					strBuffer_tLogRow_3.append("|");

					if (row7.thresholds != null) { //

						strBuffer_tLogRow_3.append(String
								.valueOf(row7.thresholds));

					} //

					String[] row_tLogRow_3 = new String[15];

					if (row7.moment != null) { //
						row_tLogRow_3[0] = FormatterUtils.format_Date(
								row7.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row7.pid != null) { //
						row_tLogRow_3[1] = String.valueOf(row7.pid);

					} //

					if (row7.father_pid != null) { //
						row_tLogRow_3[2] = String.valueOf(row7.father_pid);

					} //

					if (row7.root_pid != null) { //
						row_tLogRow_3[3] = String.valueOf(row7.root_pid);

					} //

					if (row7.system_pid != null) { //
						row_tLogRow_3[4] = String.valueOf(row7.system_pid);

					} //

					if (row7.project != null) { //
						row_tLogRow_3[5] = String.valueOf(row7.project);

					} //

					if (row7.job != null) { //
						row_tLogRow_3[6] = String.valueOf(row7.job);

					} //

					if (row7.job_repository_id != null) { //
						row_tLogRow_3[7] = String
								.valueOf(row7.job_repository_id);

					} //

					if (row7.job_version != null) { //
						row_tLogRow_3[8] = String.valueOf(row7.job_version);

					} //

					if (row7.context != null) { //
						row_tLogRow_3[9] = String.valueOf(row7.context);

					} //

					if (row7.origin != null) { //
						row_tLogRow_3[10] = String.valueOf(row7.origin);

					} //

					if (row7.label != null) { //
						row_tLogRow_3[11] = String.valueOf(row7.label);

					} //

					if (row7.count != null) { //
						row_tLogRow_3[12] = String.valueOf(row7.count);

					} //

					if (row7.reference != null) { //
						row_tLogRow_3[13] = String.valueOf(row7.reference);

					} //

					if (row7.thresholds != null) { //
						row_tLogRow_3[14] = String.valueOf(row7.thresholds);

					} //

					nb_line_tLogRow_3++;
					consoleOut_tLogRow_3.println(util_tLogRow_3.print(
							row_tLogRow_3, nb_line_tLogRow_3));
					consoleOut_tLogRow_3.flush();
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_3++;

					/**
					 * [tLogRow_3 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hgnc_2_geneFamily hgnc_2_geneFamilyClass = new hgnc_2_geneFamily();

		int exitCode = hgnc_2_geneFamilyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = hgnc_2_geneFamily.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/hgnc_2_genefamily_1_0/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

				context.workPath = (String) context.getProperty("workPath");

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("workPath")) {
				context.workPath = (String) parentContextMap.get("workPath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			status = "failure";
			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : hgnc_2_geneFamily");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index),
						replaceEscapeChars(keyValue.substring(index + 1)));
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 125228 characters generated by Talend Open Studio for Data Integration on the
 * 25 avril 2012 14:25:46 EDT
 ************************************************************************************************/
