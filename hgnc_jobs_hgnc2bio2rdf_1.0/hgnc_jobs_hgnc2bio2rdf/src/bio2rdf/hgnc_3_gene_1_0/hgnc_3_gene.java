// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.0.1.r74687)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package bio2rdf.hgnc_3_gene_1_0;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: hgnc_3_gene Purpose: <br>
 * Description: <br>
 * 
 * @author test@talend.com
 * @version 5.0.1.r74687
 * @status PROD
 */
public class hgnc_3_gene implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (workPath != null) {

				this.setProperty("workPath", workPath.toString());

			}

		}

		public String workPath;

		public String getWorkPath() {
			return this.workPath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "hgnc_3_gene";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_5X9dIEsDEeG8DZlKdrm9Xw", "1.0");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hgnc_3_gene.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hgnc_3_gene.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_6", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_4", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_25", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_4", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_3", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_30", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplicate_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_3", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_6", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tNormalize_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNormalize_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_5", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_34", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplicate_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_5", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tSplitRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSplitRow_3", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tNormalize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNormalize_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplace_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeter_32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeter_32", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_7", System.currentTimeMillis());

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hgnc1Struct implements
			routines.system.IPersistableRow<hgnc1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hgnc1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hgnc2Struct implements
			routines.system.IPersistableRow<hgnc2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hgnc2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out10Struct implements
			routines.system.IPersistableRow<out10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		public String ApprovedSymbol;

		public String getApprovedSymbol() {
			return this.ApprovedSymbol;
		}

		public String ApprovedName;

		public String getApprovedName() {
			return this.ApprovedName;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String LocusType;

		public String getLocusType() {
			return this.LocusType;
		}

		public String LocusGroup;

		public String getLocusGroup() {
			return this.LocusGroup;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		public String Chromosome;

		public String getChromosome() {
			return this.Chromosome;
		}

		public String DateApproved;

		public String getDateApproved() {
			return this.DateApproved;
		}

		public String DateModified;

		public String getDateModified() {
			return this.DateModified;
		}

		public String DateSymbolChanged;

		public String getDateSymbolChanged() {
			return this.DateSymbolChanged;
		}

		public String DateNameChanged;

		public String getDateNameChanged() {
			return this.DateNameChanged;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String EntrezGeneID;

		public String getEntrezGeneID() {
			return this.EntrezGeneID;
		}

		public String EnsemblGeneID;

		public String getEnsemblGeneID() {
			return this.EnsemblGeneID;
		}

		public String MouseGenomeDatabaseID;

		public String getMouseGenomeDatabaseID() {
			return this.MouseGenomeDatabaseID;
		}

		public String SpecialistDatabaseLinks;

		public String getSpecialistDatabaseLinks() {
			return this.SpecialistDatabaseLinks;
		}

		public String SpecialistDatabaseIDs;

		public String getSpecialistDatabaseIDs() {
			return this.SpecialistDatabaseIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String RecordType;

		public String getRecordType() {
			return this.RecordType;
		}

		public String PrimaryIDs;

		public String getPrimaryIDs() {
			return this.PrimaryIDs;
		}

		public String SecondaryIDs;

		public String getSecondaryIDs() {
			return this.SecondaryIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		public String LocusSpecificDatabases;

		public String getLocusSpecificDatabases() {
			return this.LocusSpecificDatabases;
		}

		public String GDB_ID;

		public String getGDB_ID() {
			return this.GDB_ID;
		}

		public String EntrezGene_ID_mapped;

		public String getEntrezGene_ID_mapped() {
			return this.EntrezGene_ID_mapped;
		}

		public String OMIM_ID;

		public String getOMIM_ID() {
			return this.OMIM_ID;
		}

		public String RefSeq_ID;

		public String getRefSeq_ID() {
			return this.RefSeq_ID;
		}

		public String UniProt_ID;

		public String getUniProt_ID() {
			return this.UniProt_ID;
		}

		public String Ensembl_ID;

		public String getEnsembl_ID() {
			return this.Ensembl_ID;
		}

		public String UCSC_ID;

		public String getUCSC_ID() {
			return this.UCSC_ID;
		}

		public String MGI_ID_mapped;

		public String getMGI_ID_mapped() {
			return this.MGI_ID_mapped;
		}

		public String RGD_ID;

		public String getRGD_ID() {
			return this.RGD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.title = readString(dis);

					this.bmuri = readString(dis);

					this.id = readString(dis);

					this.HGNC_ID = readString(dis);

					this.ApprovedSymbol = readString(dis);

					this.ApprovedName = readString(dis);

					this.Status = readString(dis);

					this.LocusType = readString(dis);

					this.LocusGroup = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

					this.Chromosome = readString(dis);

					this.DateApproved = readString(dis);

					this.DateModified = readString(dis);

					this.DateSymbolChanged = readString(dis);

					this.DateNameChanged = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.EntrezGeneID = readString(dis);

					this.EnsemblGeneID = readString(dis);

					this.MouseGenomeDatabaseID = readString(dis);

					this.SpecialistDatabaseLinks = readString(dis);

					this.SpecialistDatabaseIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.RecordType = readString(dis);

					this.PrimaryIDs = readString(dis);

					this.SecondaryIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

					this.LocusSpecificDatabases = readString(dis);

					this.GDB_ID = readString(dis);

					this.EntrezGene_ID_mapped = readString(dis);

					this.OMIM_ID = readString(dis);

					this.RefSeq_ID = readString(dis);

					this.UniProt_ID = readString(dis);

					this.Ensembl_ID = readString(dis);

					this.UCSC_ID = readString(dis);

					this.MGI_ID_mapped = readString(dis);

					this.RGD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.HGNC_ID, dos);

				// String

				writeString(this.ApprovedSymbol, dos);

				// String

				writeString(this.ApprovedName, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.LocusType, dos);

				// String

				writeString(this.LocusGroup, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

				// String

				writeString(this.Chromosome, dos);

				// String

				writeString(this.DateApproved, dos);

				// String

				writeString(this.DateModified, dos);

				// String

				writeString(this.DateSymbolChanged, dos);

				// String

				writeString(this.DateNameChanged, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.EntrezGeneID, dos);

				// String

				writeString(this.EnsemblGeneID, dos);

				// String

				writeString(this.MouseGenomeDatabaseID, dos);

				// String

				writeString(this.SpecialistDatabaseLinks, dos);

				// String

				writeString(this.SpecialistDatabaseIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.RecordType, dos);

				// String

				writeString(this.PrimaryIDs, dos);

				// String

				writeString(this.SecondaryIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

				// String

				writeString(this.LocusSpecificDatabases, dos);

				// String

				writeString(this.GDB_ID, dos);

				// String

				writeString(this.EntrezGene_ID_mapped, dos);

				// String

				writeString(this.OMIM_ID, dos);

				// String

				writeString(this.RefSeq_ID, dos);

				// String

				writeString(this.UniProt_ID, dos);

				// String

				writeString(this.Ensembl_ID, dos);

				// String

				writeString(this.UCSC_ID, dos);

				// String

				writeString(this.MGI_ID_mapped, dos);

				// String

				writeString(this.RGD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",title=" + title);
			sb.append(",bmuri=" + bmuri);
			sb.append(",id=" + id);
			sb.append(",HGNC_ID=" + HGNC_ID);
			sb.append(",ApprovedSymbol=" + ApprovedSymbol);
			sb.append(",ApprovedName=" + ApprovedName);
			sb.append(",Status=" + Status);
			sb.append(",LocusType=" + LocusType);
			sb.append(",LocusGroup=" + LocusGroup);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append(",Chromosome=" + Chromosome);
			sb.append(",DateApproved=" + DateApproved);
			sb.append(",DateModified=" + DateModified);
			sb.append(",DateSymbolChanged=" + DateSymbolChanged);
			sb.append(",DateNameChanged=" + DateNameChanged);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",EntrezGeneID=" + EntrezGeneID);
			sb.append(",EnsemblGeneID=" + EnsemblGeneID);
			sb.append(",MouseGenomeDatabaseID=" + MouseGenomeDatabaseID);
			sb.append(",SpecialistDatabaseLinks=" + SpecialistDatabaseLinks);
			sb.append(",SpecialistDatabaseIDs=" + SpecialistDatabaseIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",RecordType=" + RecordType);
			sb.append(",PrimaryIDs=" + PrimaryIDs);
			sb.append(",SecondaryIDs=" + SecondaryIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append(",LocusSpecificDatabases=" + LocusSpecificDatabases);
			sb.append(",GDB_ID=" + GDB_ID);
			sb.append(",EntrezGene_ID_mapped=" + EntrezGene_ID_mapped);
			sb.append(",OMIM_ID=" + OMIM_ID);
			sb.append(",RefSeq_ID=" + RefSeq_ID);
			sb.append(",UniProt_ID=" + UniProt_ID);
			sb.append(",Ensembl_ID=" + Ensembl_ID);
			sb.append(",UCSC_ID=" + UCSC_ID);
			sb.append(",MGI_ID_mapped=" + MGI_ID_mapped);
			sb.append(",RGD_ID=" + RGD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		public String ApprovedSymbol;

		public String getApprovedSymbol() {
			return this.ApprovedSymbol;
		}

		public String ApprovedName;

		public String getApprovedName() {
			return this.ApprovedName;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String LocusType;

		public String getLocusType() {
			return this.LocusType;
		}

		public String LocusGroup;

		public String getLocusGroup() {
			return this.LocusGroup;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		public String Chromosome;

		public String getChromosome() {
			return this.Chromosome;
		}

		public String DateApproved;

		public String getDateApproved() {
			return this.DateApproved;
		}

		public String DateModified;

		public String getDateModified() {
			return this.DateModified;
		}

		public String DateSymbolChanged;

		public String getDateSymbolChanged() {
			return this.DateSymbolChanged;
		}

		public String DateNameChanged;

		public String getDateNameChanged() {
			return this.DateNameChanged;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String EntrezGeneID;

		public String getEntrezGeneID() {
			return this.EntrezGeneID;
		}

		public String EnsemblGeneID;

		public String getEnsemblGeneID() {
			return this.EnsemblGeneID;
		}

		public String MouseGenomeDatabaseID;

		public String getMouseGenomeDatabaseID() {
			return this.MouseGenomeDatabaseID;
		}

		public String SpecialistDatabaseLinks;

		public String getSpecialistDatabaseLinks() {
			return this.SpecialistDatabaseLinks;
		}

		public String SpecialistDatabaseIDs;

		public String getSpecialistDatabaseIDs() {
			return this.SpecialistDatabaseIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String RecordType;

		public String getRecordType() {
			return this.RecordType;
		}

		public String PrimaryIDs;

		public String getPrimaryIDs() {
			return this.PrimaryIDs;
		}

		public String SecondaryIDs;

		public String getSecondaryIDs() {
			return this.SecondaryIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		public String LocusSpecificDatabases;

		public String getLocusSpecificDatabases() {
			return this.LocusSpecificDatabases;
		}

		public String GDB_ID;

		public String getGDB_ID() {
			return this.GDB_ID;
		}

		public String EntrezGene_ID_mapped;

		public String getEntrezGene_ID_mapped() {
			return this.EntrezGene_ID_mapped;
		}

		public String OMIM_ID;

		public String getOMIM_ID() {
			return this.OMIM_ID;
		}

		public String RefSeq_ID;

		public String getRefSeq_ID() {
			return this.RefSeq_ID;
		}

		public String UniProt_ID;

		public String getUniProt_ID() {
			return this.UniProt_ID;
		}

		public String Ensembl_ID;

		public String getEnsembl_ID() {
			return this.Ensembl_ID;
		}

		public String UCSC_ID;

		public String getUCSC_ID() {
			return this.UCSC_ID;
		}

		public String MGI_ID_mapped;

		public String getMGI_ID_mapped() {
			return this.MGI_ID_mapped;
		}

		public String RGD_ID;

		public String getRGD_ID() {
			return this.RGD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.title = readString(dis);

					this.bmuri = readString(dis);

					this.id = readString(dis);

					this.HGNC_ID = readString(dis);

					this.ApprovedSymbol = readString(dis);

					this.ApprovedName = readString(dis);

					this.Status = readString(dis);

					this.LocusType = readString(dis);

					this.LocusGroup = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

					this.Chromosome = readString(dis);

					this.DateApproved = readString(dis);

					this.DateModified = readString(dis);

					this.DateSymbolChanged = readString(dis);

					this.DateNameChanged = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.EntrezGeneID = readString(dis);

					this.EnsemblGeneID = readString(dis);

					this.MouseGenomeDatabaseID = readString(dis);

					this.SpecialistDatabaseLinks = readString(dis);

					this.SpecialistDatabaseIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.RecordType = readString(dis);

					this.PrimaryIDs = readString(dis);

					this.SecondaryIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

					this.LocusSpecificDatabases = readString(dis);

					this.GDB_ID = readString(dis);

					this.EntrezGene_ID_mapped = readString(dis);

					this.OMIM_ID = readString(dis);

					this.RefSeq_ID = readString(dis);

					this.UniProt_ID = readString(dis);

					this.Ensembl_ID = readString(dis);

					this.UCSC_ID = readString(dis);

					this.MGI_ID_mapped = readString(dis);

					this.RGD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.HGNC_ID, dos);

				// String

				writeString(this.ApprovedSymbol, dos);

				// String

				writeString(this.ApprovedName, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.LocusType, dos);

				// String

				writeString(this.LocusGroup, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

				// String

				writeString(this.Chromosome, dos);

				// String

				writeString(this.DateApproved, dos);

				// String

				writeString(this.DateModified, dos);

				// String

				writeString(this.DateSymbolChanged, dos);

				// String

				writeString(this.DateNameChanged, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.EntrezGeneID, dos);

				// String

				writeString(this.EnsemblGeneID, dos);

				// String

				writeString(this.MouseGenomeDatabaseID, dos);

				// String

				writeString(this.SpecialistDatabaseLinks, dos);

				// String

				writeString(this.SpecialistDatabaseIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.RecordType, dos);

				// String

				writeString(this.PrimaryIDs, dos);

				// String

				writeString(this.SecondaryIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

				// String

				writeString(this.LocusSpecificDatabases, dos);

				// String

				writeString(this.GDB_ID, dos);

				// String

				writeString(this.EntrezGene_ID_mapped, dos);

				// String

				writeString(this.OMIM_ID, dos);

				// String

				writeString(this.RefSeq_ID, dos);

				// String

				writeString(this.UniProt_ID, dos);

				// String

				writeString(this.Ensembl_ID, dos);

				// String

				writeString(this.UCSC_ID, dos);

				// String

				writeString(this.MGI_ID_mapped, dos);

				// String

				writeString(this.RGD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",title=" + title);
			sb.append(",bmuri=" + bmuri);
			sb.append(",id=" + id);
			sb.append(",HGNC_ID=" + HGNC_ID);
			sb.append(",ApprovedSymbol=" + ApprovedSymbol);
			sb.append(",ApprovedName=" + ApprovedName);
			sb.append(",Status=" + Status);
			sb.append(",LocusType=" + LocusType);
			sb.append(",LocusGroup=" + LocusGroup);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append(",Chromosome=" + Chromosome);
			sb.append(",DateApproved=" + DateApproved);
			sb.append(",DateModified=" + DateModified);
			sb.append(",DateSymbolChanged=" + DateSymbolChanged);
			sb.append(",DateNameChanged=" + DateNameChanged);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",EntrezGeneID=" + EntrezGeneID);
			sb.append(",EnsemblGeneID=" + EnsemblGeneID);
			sb.append(",MouseGenomeDatabaseID=" + MouseGenomeDatabaseID);
			sb.append(",SpecialistDatabaseLinks=" + SpecialistDatabaseLinks);
			sb.append(",SpecialistDatabaseIDs=" + SpecialistDatabaseIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",RecordType=" + RecordType);
			sb.append(",PrimaryIDs=" + PrimaryIDs);
			sb.append(",SecondaryIDs=" + SecondaryIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append(",LocusSpecificDatabases=" + LocusSpecificDatabases);
			sb.append(",GDB_ID=" + GDB_ID);
			sb.append(",EntrezGene_ID_mapped=" + EntrezGene_ID_mapped);
			sb.append(",OMIM_ID=" + OMIM_ID);
			sb.append(",RefSeq_ID=" + RefSeq_ID);
			sb.append(",UniProt_ID=" + UniProt_ID);
			sb.append(",Ensembl_ID=" + Ensembl_ID);
			sb.append(",UCSC_ID=" + UCSC_ID);
			sb.append(",MGI_ID_mapped=" + MGI_ID_mapped);
			sb.append(",RGD_ID=" + RGD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		public String ApprovedSymbol;

		public String getApprovedSymbol() {
			return this.ApprovedSymbol;
		}

		public String ApprovedName;

		public String getApprovedName() {
			return this.ApprovedName;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String LocusType;

		public String getLocusType() {
			return this.LocusType;
		}

		public String LocusGroup;

		public String getLocusGroup() {
			return this.LocusGroup;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		public String Chromosome;

		public String getChromosome() {
			return this.Chromosome;
		}

		public String DateApproved;

		public String getDateApproved() {
			return this.DateApproved;
		}

		public String DateModified;

		public String getDateModified() {
			return this.DateModified;
		}

		public String DateSymbolChanged;

		public String getDateSymbolChanged() {
			return this.DateSymbolChanged;
		}

		public String DateNameChanged;

		public String getDateNameChanged() {
			return this.DateNameChanged;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String EntrezGeneID;

		public String getEntrezGeneID() {
			return this.EntrezGeneID;
		}

		public String EnsemblGeneID;

		public String getEnsemblGeneID() {
			return this.EnsemblGeneID;
		}

		public String MouseGenomeDatabaseID;

		public String getMouseGenomeDatabaseID() {
			return this.MouseGenomeDatabaseID;
		}

		public String SpecialistDatabaseLinks;

		public String getSpecialistDatabaseLinks() {
			return this.SpecialistDatabaseLinks;
		}

		public String SpecialistDatabaseIDs;

		public String getSpecialistDatabaseIDs() {
			return this.SpecialistDatabaseIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String RecordType;

		public String getRecordType() {
			return this.RecordType;
		}

		public String PrimaryIDs;

		public String getPrimaryIDs() {
			return this.PrimaryIDs;
		}

		public String SecondaryIDs;

		public String getSecondaryIDs() {
			return this.SecondaryIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		public String LocusSpecificDatabases;

		public String getLocusSpecificDatabases() {
			return this.LocusSpecificDatabases;
		}

		public String GDB_ID;

		public String getGDB_ID() {
			return this.GDB_ID;
		}

		public String EntrezGene_ID_mapped;

		public String getEntrezGene_ID_mapped() {
			return this.EntrezGene_ID_mapped;
		}

		public String OMIM_ID;

		public String getOMIM_ID() {
			return this.OMIM_ID;
		}

		public String RefSeq_ID;

		public String getRefSeq_ID() {
			return this.RefSeq_ID;
		}

		public String UniProt_ID;

		public String getUniProt_ID() {
			return this.UniProt_ID;
		}

		public String Ensembl_ID;

		public String getEnsembl_ID() {
			return this.Ensembl_ID;
		}

		public String UCSC_ID;

		public String getUCSC_ID() {
			return this.UCSC_ID;
		}

		public String MGI_ID_mapped;

		public String getMGI_ID_mapped() {
			return this.MGI_ID_mapped;
		}

		public String RGD_ID;

		public String getRGD_ID() {
			return this.RGD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.title = readString(dis);

					this.bmuri = readString(dis);

					this.id = readString(dis);

					this.HGNC_ID = readString(dis);

					this.ApprovedSymbol = readString(dis);

					this.ApprovedName = readString(dis);

					this.Status = readString(dis);

					this.LocusType = readString(dis);

					this.LocusGroup = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

					this.Chromosome = readString(dis);

					this.DateApproved = readString(dis);

					this.DateModified = readString(dis);

					this.DateSymbolChanged = readString(dis);

					this.DateNameChanged = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.EntrezGeneID = readString(dis);

					this.EnsemblGeneID = readString(dis);

					this.MouseGenomeDatabaseID = readString(dis);

					this.SpecialistDatabaseLinks = readString(dis);

					this.SpecialistDatabaseIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.RecordType = readString(dis);

					this.PrimaryIDs = readString(dis);

					this.SecondaryIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

					this.LocusSpecificDatabases = readString(dis);

					this.GDB_ID = readString(dis);

					this.EntrezGene_ID_mapped = readString(dis);

					this.OMIM_ID = readString(dis);

					this.RefSeq_ID = readString(dis);

					this.UniProt_ID = readString(dis);

					this.Ensembl_ID = readString(dis);

					this.UCSC_ID = readString(dis);

					this.MGI_ID_mapped = readString(dis);

					this.RGD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.HGNC_ID, dos);

				// String

				writeString(this.ApprovedSymbol, dos);

				// String

				writeString(this.ApprovedName, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.LocusType, dos);

				// String

				writeString(this.LocusGroup, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

				// String

				writeString(this.Chromosome, dos);

				// String

				writeString(this.DateApproved, dos);

				// String

				writeString(this.DateModified, dos);

				// String

				writeString(this.DateSymbolChanged, dos);

				// String

				writeString(this.DateNameChanged, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.EntrezGeneID, dos);

				// String

				writeString(this.EnsemblGeneID, dos);

				// String

				writeString(this.MouseGenomeDatabaseID, dos);

				// String

				writeString(this.SpecialistDatabaseLinks, dos);

				// String

				writeString(this.SpecialistDatabaseIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.RecordType, dos);

				// String

				writeString(this.PrimaryIDs, dos);

				// String

				writeString(this.SecondaryIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

				// String

				writeString(this.LocusSpecificDatabases, dos);

				// String

				writeString(this.GDB_ID, dos);

				// String

				writeString(this.EntrezGene_ID_mapped, dos);

				// String

				writeString(this.OMIM_ID, dos);

				// String

				writeString(this.RefSeq_ID, dos);

				// String

				writeString(this.UniProt_ID, dos);

				// String

				writeString(this.Ensembl_ID, dos);

				// String

				writeString(this.UCSC_ID, dos);

				// String

				writeString(this.MGI_ID_mapped, dos);

				// String

				writeString(this.RGD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",title=" + title);
			sb.append(",bmuri=" + bmuri);
			sb.append(",id=" + id);
			sb.append(",HGNC_ID=" + HGNC_ID);
			sb.append(",ApprovedSymbol=" + ApprovedSymbol);
			sb.append(",ApprovedName=" + ApprovedName);
			sb.append(",Status=" + Status);
			sb.append(",LocusType=" + LocusType);
			sb.append(",LocusGroup=" + LocusGroup);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append(",Chromosome=" + Chromosome);
			sb.append(",DateApproved=" + DateApproved);
			sb.append(",DateModified=" + DateModified);
			sb.append(",DateSymbolChanged=" + DateSymbolChanged);
			sb.append(",DateNameChanged=" + DateNameChanged);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",EntrezGeneID=" + EntrezGeneID);
			sb.append(",EnsemblGeneID=" + EnsemblGeneID);
			sb.append(",MouseGenomeDatabaseID=" + MouseGenomeDatabaseID);
			sb.append(",SpecialistDatabaseLinks=" + SpecialistDatabaseLinks);
			sb.append(",SpecialistDatabaseIDs=" + SpecialistDatabaseIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",RecordType=" + RecordType);
			sb.append(",PrimaryIDs=" + PrimaryIDs);
			sb.append(",SecondaryIDs=" + SecondaryIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append(",LocusSpecificDatabases=" + LocusSpecificDatabases);
			sb.append(",GDB_ID=" + GDB_ID);
			sb.append(",EntrezGene_ID_mapped=" + EntrezGene_ID_mapped);
			sb.append(",OMIM_ID=" + OMIM_ID);
			sb.append(",RefSeq_ID=" + RefSeq_ID);
			sb.append(",UniProt_ID=" + UniProt_ID);
			sb.append(",Ensembl_ID=" + Ensembl_ID);
			sb.append(",UCSC_ID=" + UCSC_ID);
			sb.append(",MGI_ID_mapped=" + MGI_ID_mapped);
			sb.append(",RGD_ID=" + RGD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hgnc4Struct implements
			routines.system.IPersistableRow<hgnc4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hgnc4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out9Struct implements
			routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.bmuri = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bmuri=" + bmuri);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hgnc3Struct implements
			routines.system.IPersistableRow<hgnc3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hgnc3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		public Boolean literal;

		public Boolean getLiteral() {
			return this.literal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.literal = null;
					} else {
						this.literal = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

				// Boolean

				if (this.literal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.literal);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append(",literal=" + String.valueOf(literal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String predicate;

		public String getPredicate() {
			return this.predicate;
		}

		public String object;

		public String getObject() {
			return this.object;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.subject = readString(dis);

					this.predicate = readString(dis);

					this.object = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.predicate, dos);

				// String

				writeString(this.object, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("subject=" + subject);
			sb.append(",predicate=" + predicate);
			sb.append(",object=" + object);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.bmuri = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bmuri=" + bmuri);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		public String ApprovedSymbol;

		public String getApprovedSymbol() {
			return this.ApprovedSymbol;
		}

		public String ApprovedName;

		public String getApprovedName() {
			return this.ApprovedName;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String LocusType;

		public String getLocusType() {
			return this.LocusType;
		}

		public String LocusGroup;

		public String getLocusGroup() {
			return this.LocusGroup;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		public String Chromosome;

		public String getChromosome() {
			return this.Chromosome;
		}

		public String DateApproved;

		public String getDateApproved() {
			return this.DateApproved;
		}

		public String DateModified;

		public String getDateModified() {
			return this.DateModified;
		}

		public String DateSymbolChanged;

		public String getDateSymbolChanged() {
			return this.DateSymbolChanged;
		}

		public String DateNameChanged;

		public String getDateNameChanged() {
			return this.DateNameChanged;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String EntrezGeneID;

		public String getEntrezGeneID() {
			return this.EntrezGeneID;
		}

		public String EnsemblGeneID;

		public String getEnsemblGeneID() {
			return this.EnsemblGeneID;
		}

		public String MouseGenomeDatabaseID;

		public String getMouseGenomeDatabaseID() {
			return this.MouseGenomeDatabaseID;
		}

		public String SpecialistDatabaseLinks;

		public String getSpecialistDatabaseLinks() {
			return this.SpecialistDatabaseLinks;
		}

		public String SpecialistDatabaseIDs;

		public String getSpecialistDatabaseIDs() {
			return this.SpecialistDatabaseIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String RecordType;

		public String getRecordType() {
			return this.RecordType;
		}

		public String PrimaryIDs;

		public String getPrimaryIDs() {
			return this.PrimaryIDs;
		}

		public String SecondaryIDs;

		public String getSecondaryIDs() {
			return this.SecondaryIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		public String LocusSpecificDatabases;

		public String getLocusSpecificDatabases() {
			return this.LocusSpecificDatabases;
		}

		public String GDB_ID;

		public String getGDB_ID() {
			return this.GDB_ID;
		}

		public String EntrezGene_ID_mapped;

		public String getEntrezGene_ID_mapped() {
			return this.EntrezGene_ID_mapped;
		}

		public String OMIM_ID;

		public String getOMIM_ID() {
			return this.OMIM_ID;
		}

		public String RefSeq_ID;

		public String getRefSeq_ID() {
			return this.RefSeq_ID;
		}

		public String UniProt_ID;

		public String getUniProt_ID() {
			return this.UniProt_ID;
		}

		public String Ensembl_ID;

		public String getEnsembl_ID() {
			return this.Ensembl_ID;
		}

		public String UCSC_ID;

		public String getUCSC_ID() {
			return this.UCSC_ID;
		}

		public String MGI_ID_mapped;

		public String getMGI_ID_mapped() {
			return this.MGI_ID_mapped;
		}

		public String RGD_ID;

		public String getRGD_ID() {
			return this.RGD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.title = readString(dis);

					this.bmuri = readString(dis);

					this.id = readString(dis);

					this.HGNC_ID = readString(dis);

					this.ApprovedSymbol = readString(dis);

					this.ApprovedName = readString(dis);

					this.Status = readString(dis);

					this.LocusType = readString(dis);

					this.LocusGroup = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

					this.Chromosome = readString(dis);

					this.DateApproved = readString(dis);

					this.DateModified = readString(dis);

					this.DateSymbolChanged = readString(dis);

					this.DateNameChanged = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.EntrezGeneID = readString(dis);

					this.EnsemblGeneID = readString(dis);

					this.MouseGenomeDatabaseID = readString(dis);

					this.SpecialistDatabaseLinks = readString(dis);

					this.SpecialistDatabaseIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.RecordType = readString(dis);

					this.PrimaryIDs = readString(dis);

					this.SecondaryIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

					this.LocusSpecificDatabases = readString(dis);

					this.GDB_ID = readString(dis);

					this.EntrezGene_ID_mapped = readString(dis);

					this.OMIM_ID = readString(dis);

					this.RefSeq_ID = readString(dis);

					this.UniProt_ID = readString(dis);

					this.Ensembl_ID = readString(dis);

					this.UCSC_ID = readString(dis);

					this.MGI_ID_mapped = readString(dis);

					this.RGD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.HGNC_ID, dos);

				// String

				writeString(this.ApprovedSymbol, dos);

				// String

				writeString(this.ApprovedName, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.LocusType, dos);

				// String

				writeString(this.LocusGroup, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

				// String

				writeString(this.Chromosome, dos);

				// String

				writeString(this.DateApproved, dos);

				// String

				writeString(this.DateModified, dos);

				// String

				writeString(this.DateSymbolChanged, dos);

				// String

				writeString(this.DateNameChanged, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.EntrezGeneID, dos);

				// String

				writeString(this.EnsemblGeneID, dos);

				// String

				writeString(this.MouseGenomeDatabaseID, dos);

				// String

				writeString(this.SpecialistDatabaseLinks, dos);

				// String

				writeString(this.SpecialistDatabaseIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.RecordType, dos);

				// String

				writeString(this.PrimaryIDs, dos);

				// String

				writeString(this.SecondaryIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

				// String

				writeString(this.LocusSpecificDatabases, dos);

				// String

				writeString(this.GDB_ID, dos);

				// String

				writeString(this.EntrezGene_ID_mapped, dos);

				// String

				writeString(this.OMIM_ID, dos);

				// String

				writeString(this.RefSeq_ID, dos);

				// String

				writeString(this.UniProt_ID, dos);

				// String

				writeString(this.Ensembl_ID, dos);

				// String

				writeString(this.UCSC_ID, dos);

				// String

				writeString(this.MGI_ID_mapped, dos);

				// String

				writeString(this.RGD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",title=" + title);
			sb.append(",bmuri=" + bmuri);
			sb.append(",id=" + id);
			sb.append(",HGNC_ID=" + HGNC_ID);
			sb.append(",ApprovedSymbol=" + ApprovedSymbol);
			sb.append(",ApprovedName=" + ApprovedName);
			sb.append(",Status=" + Status);
			sb.append(",LocusType=" + LocusType);
			sb.append(",LocusGroup=" + LocusGroup);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append(",Chromosome=" + Chromosome);
			sb.append(",DateApproved=" + DateApproved);
			sb.append(",DateModified=" + DateModified);
			sb.append(",DateSymbolChanged=" + DateSymbolChanged);
			sb.append(",DateNameChanged=" + DateNameChanged);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",EntrezGeneID=" + EntrezGeneID);
			sb.append(",EnsemblGeneID=" + EnsemblGeneID);
			sb.append(",MouseGenomeDatabaseID=" + MouseGenomeDatabaseID);
			sb.append(",SpecialistDatabaseLinks=" + SpecialistDatabaseLinks);
			sb.append(",SpecialistDatabaseIDs=" + SpecialistDatabaseIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",RecordType=" + RecordType);
			sb.append(",PrimaryIDs=" + PrimaryIDs);
			sb.append(",SecondaryIDs=" + SecondaryIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append(",LocusSpecificDatabases=" + LocusSpecificDatabases);
			sb.append(",GDB_ID=" + GDB_ID);
			sb.append(",EntrezGene_ID_mapped=" + EntrezGene_ID_mapped);
			sb.append(",OMIM_ID=" + OMIM_ID);
			sb.append(",RefSeq_ID=" + RefSeq_ID);
			sb.append(",UniProt_ID=" + UniProt_ID);
			sb.append(",Ensembl_ID=" + Ensembl_ID);
			sb.append(",UCSC_ID=" + UCSC_ID);
			sb.append(",MGI_ID_mapped=" + MGI_ID_mapped);
			sb.append(",RGD_ID=" + RGD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.bmuri = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bmuri=" + bmuri);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String bmuri;

		public String getBmuri() {
			return this.bmuri;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.bmuri = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.bmuri, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bmuri=" + bmuri);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String HGNC_ID;

		public String getHGNC_ID() {
			return this.HGNC_ID;
		}

		public String ApprovedSymbol;

		public String getApprovedSymbol() {
			return this.ApprovedSymbol;
		}

		public String ApprovedName;

		public String getApprovedName() {
			return this.ApprovedName;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String LocusType;

		public String getLocusType() {
			return this.LocusType;
		}

		public String LocusGroup;

		public String getLocusGroup() {
			return this.LocusGroup;
		}

		public String PreviousSymbols;

		public String getPreviousSymbols() {
			return this.PreviousSymbols;
		}

		public String PreviousNames;

		public String getPreviousNames() {
			return this.PreviousNames;
		}

		public String Synonyms;

		public String getSynonyms() {
			return this.Synonyms;
		}

		public String NameSynonyms;

		public String getNameSynonyms() {
			return this.NameSynonyms;
		}

		public String Chromosome;

		public String getChromosome() {
			return this.Chromosome;
		}

		public String DateApproved;

		public String getDateApproved() {
			return this.DateApproved;
		}

		public String DateModified;

		public String getDateModified() {
			return this.DateModified;
		}

		public String DateSymbolChanged;

		public String getDateSymbolChanged() {
			return this.DateSymbolChanged;
		}

		public String DateNameChanged;

		public String getDateNameChanged() {
			return this.DateNameChanged;
		}

		public String AccessionNumbers;

		public String getAccessionNumbers() {
			return this.AccessionNumbers;
		}

		public String EnzymeIDs;

		public String getEnzymeIDs() {
			return this.EnzymeIDs;
		}

		public String EntrezGeneID;

		public String getEntrezGeneID() {
			return this.EntrezGeneID;
		}

		public String EnsemblGeneID;

		public String getEnsemblGeneID() {
			return this.EnsemblGeneID;
		}

		public String MouseGenomeDatabaseID;

		public String getMouseGenomeDatabaseID() {
			return this.MouseGenomeDatabaseID;
		}

		public String SpecialistDatabaseLinks;

		public String getSpecialistDatabaseLinks() {
			return this.SpecialistDatabaseLinks;
		}

		public String SpecialistDatabaseIDs;

		public String getSpecialistDatabaseIDs() {
			return this.SpecialistDatabaseIDs;
		}

		public String PubmedIDs;

		public String getPubmedIDs() {
			return this.PubmedIDs;
		}

		public String RefSeqIDs;

		public String getRefSeqIDs() {
			return this.RefSeqIDs;
		}

		public String GeneFamilyTag;

		public String getGeneFamilyTag() {
			return this.GeneFamilyTag;
		}

		public String GeneFamilyDescription;

		public String getGeneFamilyDescription() {
			return this.GeneFamilyDescription;
		}

		public String RecordType;

		public String getRecordType() {
			return this.RecordType;
		}

		public String PrimaryIDs;

		public String getPrimaryIDs() {
			return this.PrimaryIDs;
		}

		public String SecondaryIDs;

		public String getSecondaryIDs() {
			return this.SecondaryIDs;
		}

		public String CCDS_IDs;

		public String getCCDS_IDs() {
			return this.CCDS_IDs;
		}

		public String VEGA_IDs;

		public String getVEGA_IDs() {
			return this.VEGA_IDs;
		}

		public String LocusSpecificDatabases;

		public String getLocusSpecificDatabases() {
			return this.LocusSpecificDatabases;
		}

		public String GDB_ID;

		public String getGDB_ID() {
			return this.GDB_ID;
		}

		public String EntrezGene_ID_mapped;

		public String getEntrezGene_ID_mapped() {
			return this.EntrezGene_ID_mapped;
		}

		public String OMIM_ID;

		public String getOMIM_ID() {
			return this.OMIM_ID;
		}

		public String RefSeq_ID;

		public String getRefSeq_ID() {
			return this.RefSeq_ID;
		}

		public String UniProt_ID;

		public String getUniProt_ID() {
			return this.UniProt_ID;
		}

		public String Ensembl_ID;

		public String getEnsembl_ID() {
			return this.Ensembl_ID;
		}

		public String UCSC_ID;

		public String getUCSC_ID() {
			return this.UCSC_ID;
		}

		public String MGI_ID_mapped;

		public String getMGI_ID_mapped() {
			return this.MGI_ID_mapped;
		}

		public String RGD_ID;

		public String getRGD_ID() {
			return this.RGD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.HGNC_ID = readString(dis);

					this.ApprovedSymbol = readString(dis);

					this.ApprovedName = readString(dis);

					this.Status = readString(dis);

					this.LocusType = readString(dis);

					this.LocusGroup = readString(dis);

					this.PreviousSymbols = readString(dis);

					this.PreviousNames = readString(dis);

					this.Synonyms = readString(dis);

					this.NameSynonyms = readString(dis);

					this.Chromosome = readString(dis);

					this.DateApproved = readString(dis);

					this.DateModified = readString(dis);

					this.DateSymbolChanged = readString(dis);

					this.DateNameChanged = readString(dis);

					this.AccessionNumbers = readString(dis);

					this.EnzymeIDs = readString(dis);

					this.EntrezGeneID = readString(dis);

					this.EnsemblGeneID = readString(dis);

					this.MouseGenomeDatabaseID = readString(dis);

					this.SpecialistDatabaseLinks = readString(dis);

					this.SpecialistDatabaseIDs = readString(dis);

					this.PubmedIDs = readString(dis);

					this.RefSeqIDs = readString(dis);

					this.GeneFamilyTag = readString(dis);

					this.GeneFamilyDescription = readString(dis);

					this.RecordType = readString(dis);

					this.PrimaryIDs = readString(dis);

					this.SecondaryIDs = readString(dis);

					this.CCDS_IDs = readString(dis);

					this.VEGA_IDs = readString(dis);

					this.LocusSpecificDatabases = readString(dis);

					this.GDB_ID = readString(dis);

					this.EntrezGene_ID_mapped = readString(dis);

					this.OMIM_ID = readString(dis);

					this.RefSeq_ID = readString(dis);

					this.UniProt_ID = readString(dis);

					this.Ensembl_ID = readString(dis);

					this.UCSC_ID = readString(dis);

					this.MGI_ID_mapped = readString(dis);

					this.RGD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HGNC_ID, dos);

				// String

				writeString(this.ApprovedSymbol, dos);

				// String

				writeString(this.ApprovedName, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.LocusType, dos);

				// String

				writeString(this.LocusGroup, dos);

				// String

				writeString(this.PreviousSymbols, dos);

				// String

				writeString(this.PreviousNames, dos);

				// String

				writeString(this.Synonyms, dos);

				// String

				writeString(this.NameSynonyms, dos);

				// String

				writeString(this.Chromosome, dos);

				// String

				writeString(this.DateApproved, dos);

				// String

				writeString(this.DateModified, dos);

				// String

				writeString(this.DateSymbolChanged, dos);

				// String

				writeString(this.DateNameChanged, dos);

				// String

				writeString(this.AccessionNumbers, dos);

				// String

				writeString(this.EnzymeIDs, dos);

				// String

				writeString(this.EntrezGeneID, dos);

				// String

				writeString(this.EnsemblGeneID, dos);

				// String

				writeString(this.MouseGenomeDatabaseID, dos);

				// String

				writeString(this.SpecialistDatabaseLinks, dos);

				// String

				writeString(this.SpecialistDatabaseIDs, dos);

				// String

				writeString(this.PubmedIDs, dos);

				// String

				writeString(this.RefSeqIDs, dos);

				// String

				writeString(this.GeneFamilyTag, dos);

				// String

				writeString(this.GeneFamilyDescription, dos);

				// String

				writeString(this.RecordType, dos);

				// String

				writeString(this.PrimaryIDs, dos);

				// String

				writeString(this.SecondaryIDs, dos);

				// String

				writeString(this.CCDS_IDs, dos);

				// String

				writeString(this.VEGA_IDs, dos);

				// String

				writeString(this.LocusSpecificDatabases, dos);

				// String

				writeString(this.GDB_ID, dos);

				// String

				writeString(this.EntrezGene_ID_mapped, dos);

				// String

				writeString(this.OMIM_ID, dos);

				// String

				writeString(this.RefSeq_ID, dos);

				// String

				writeString(this.UniProt_ID, dos);

				// String

				writeString(this.Ensembl_ID, dos);

				// String

				writeString(this.UCSC_ID, dos);

				// String

				writeString(this.MGI_ID_mapped, dos);

				// String

				writeString(this.RGD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HGNC_ID=" + HGNC_ID);
			sb.append(",ApprovedSymbol=" + ApprovedSymbol);
			sb.append(",ApprovedName=" + ApprovedName);
			sb.append(",Status=" + Status);
			sb.append(",LocusType=" + LocusType);
			sb.append(",LocusGroup=" + LocusGroup);
			sb.append(",PreviousSymbols=" + PreviousSymbols);
			sb.append(",PreviousNames=" + PreviousNames);
			sb.append(",Synonyms=" + Synonyms);
			sb.append(",NameSynonyms=" + NameSynonyms);
			sb.append(",Chromosome=" + Chromosome);
			sb.append(",DateApproved=" + DateApproved);
			sb.append(",DateModified=" + DateModified);
			sb.append(",DateSymbolChanged=" + DateSymbolChanged);
			sb.append(",DateNameChanged=" + DateNameChanged);
			sb.append(",AccessionNumbers=" + AccessionNumbers);
			sb.append(",EnzymeIDs=" + EnzymeIDs);
			sb.append(",EntrezGeneID=" + EntrezGeneID);
			sb.append(",EnsemblGeneID=" + EnsemblGeneID);
			sb.append(",MouseGenomeDatabaseID=" + MouseGenomeDatabaseID);
			sb.append(",SpecialistDatabaseLinks=" + SpecialistDatabaseLinks);
			sb.append(",SpecialistDatabaseIDs=" + SpecialistDatabaseIDs);
			sb.append(",PubmedIDs=" + PubmedIDs);
			sb.append(",RefSeqIDs=" + RefSeqIDs);
			sb.append(",GeneFamilyTag=" + GeneFamilyTag);
			sb.append(",GeneFamilyDescription=" + GeneFamilyDescription);
			sb.append(",RecordType=" + RecordType);
			sb.append(",PrimaryIDs=" + PrimaryIDs);
			sb.append(",SecondaryIDs=" + SecondaryIDs);
			sb.append(",CCDS_IDs=" + CCDS_IDs);
			sb.append(",VEGA_IDs=" + VEGA_IDs);
			sb.append(",LocusSpecificDatabases=" + LocusSpecificDatabases);
			sb.append(",GDB_ID=" + GDB_ID);
			sb.append(",EntrezGene_ID_mapped=" + EntrezGene_ID_mapped);
			sb.append(",OMIM_ID=" + OMIM_ID);
			sb.append(",RefSeq_ID=" + RefSeq_ID);
			sb.append(",UniProt_ID=" + UniProt_ID);
			sb.append(",Ensembl_ID=" + Ensembl_ID);
			sb.append(",UCSC_ID=" + UCSC_ID);
			sb.append(",MGI_ID_mapped=" + MGI_ID_mapped);
			sb.append(",RGD_ID=" + RGD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row15 = out1;
				row8Struct row8 = new row8Struct();
				row5Struct row5 = new row5Struct();
				row5Struct hgnc1 = row5;
				row5Struct row17 = row5;
				row9Struct row9 = new row9Struct();
				row2Struct row2 = new row2Struct();
				out10Struct out10 = new out10Struct();
				out10Struct hgnc2 = out10;
				out10Struct row18 = out10;
				out3Struct out3 = new out3Struct();
				out6Struct out6 = new out6Struct();
				row12Struct row12 = new row12Struct();
				row14Struct row14 = new row14Struct();
				out9Struct out9 = new out9Struct();
				out9Struct hgnc4 = out9;
				out9Struct row20 = out9;
				out5Struct out5 = new out5Struct();
				out4Struct out4 = new out4Struct();
				row6Struct row6 = new row6Struct();
				row4Struct row4 = new row4Struct();
				out7Struct out7 = new out7Struct();
				row3Struct row3 = new row3Struct();
				row3Struct hgnc3 = row3;
				row3Struct row19 = row3;

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14", System
						.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						context.workPath + "hgnc1.tsv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
							.substring(0, fileName_tFileOutputDelimited_14
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);
				if (filetFileOutputDelimited_14.exists()) {
					isFileGenerated_tFileOutputDelimited_14 = false;
				}

				int nb_line_tFileOutputDelimited_14 = 0;
				int splitEvery_tFileOutputDelimited_14 = 1000;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				final String OUT_DELIM_tFileOutputDelimited_14 = /**
				 * Start field
				 * tFileOutputDelimited_14:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /**
				 * Start
				 * field tFileOutputDelimited_14:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
							directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_14 = null;
				try {
					outtFileOutputDelimited_14 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_14,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_14 begin ] stop
					 */

					/**
					 * [tFlowMeter_25 begin ] start
					 */

					ok_Hash.put("tFlowMeter_25", false);
					start_Hash.put("tFlowMeter_25", System.currentTimeMillis());
					currentComponent = "tFlowMeter_25";

					int tos_count_tFlowMeter_25 = 0;

					int count_tFlowMeter_25 = 0;

					/**
					 * [tFlowMeter_25 begin ] stop
					 */

					/**
					 * [tLogRow_4 begin ] start
					 */

					ok_Hash.put("tLogRow_4", false);
					start_Hash.put("tLogRow_4", System.currentTimeMillis());
					currentComponent = "tLogRow_4";

					int tos_count_tLogRow_4 = 0;

					/**
					 * [tLogRow_4 begin ] stop
					 */

					/**
					 * [tSplitRow_1 begin ] start
					 */

					ok_Hash.put("tSplitRow_1", false);
					start_Hash.put("tSplitRow_1", System.currentTimeMillis());
					currentComponent = "tSplitRow_1";

					int tos_count_tSplitRow_1 = 0;
					int nb_line_tSplitRow_1 = 0;

					/**
					 * [tSplitRow_1 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_2", false);
					start_Hash.put("tFileOutputDelimited_2", System
							.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_2";

					int tos_count_tFileOutputDelimited_2 = 0;

					String fileName_tFileOutputDelimited_2 = "";
					fileName_tFileOutputDelimited_2 = (new java.io.File(
							context.workPath + "hgnc2.tsv")).getAbsolutePath()
							.replace("\\", "/");
					String fullName_tFileOutputDelimited_2 = null;
					String extension_tFileOutputDelimited_2 = null;
					String directory_tFileOutputDelimited_2 = null;
					if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						}
						directory_tFileOutputDelimited_2 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_2 = true;
					java.io.File filetFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);

					int nb_line_tFileOutputDelimited_2 = 0;
					int splitEvery_tFileOutputDelimited_2 = 1000;
					int splitedFileNo_tFileOutputDelimited_2 = 0;
					int currentRow_tFileOutputDelimited_2 = 0;

					final String OUT_DELIM_tFileOutputDelimited_2 = /**
					 * Start
					 * field tFileOutputDelimited_2:FIELDSEPARATOR
					 */
					"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
					 * 
					 * Start field tFileOutputDelimited_2:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_2 != null
							&& directory_tFileOutputDelimited_2.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
								directory_tFileOutputDelimited_2);
						if (!dir_tFileOutputDelimited_2.exists()) {
							dir_tFileOutputDelimited_2.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_2 = null;
					try {
						outtFileOutputDelimited_2 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), "ISO-8859-15"));

						/**
						 * [tFileOutputDelimited_2 begin ] stop
						 */

						/**
						 * [tFlowMeter_30 begin ] start
						 */

						ok_Hash.put("tFlowMeter_30", false);
						start_Hash.put("tFlowMeter_30", System
								.currentTimeMillis());
						currentComponent = "tFlowMeter_30";

						int tos_count_tFlowMeter_30 = 0;

						int count_tFlowMeter_30 = 0;

						/**
						 * [tFlowMeter_30 begin ] stop
						 */

						/**
						 * [tLogRow_3 begin ] start
						 */

						ok_Hash.put("tLogRow_3", false);
						start_Hash.put("tLogRow_3", System.currentTimeMillis());
						currentComponent = "tLogRow_3";

						int tos_count_tLogRow_3 = 0;

						/**
						 * [tLogRow_3 begin ] stop
						 */

						/**
						 * [tMap_5 begin ] start
						 */

						ok_Hash.put("tMap_5", false);
						start_Hash.put("tMap_5", System.currentTimeMillis());
						currentComponent = "tMap_5";

						int tos_count_tMap_5 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						// ###############################

						// ###############################
						// # Outputs initialization
						out10Struct out10_tmp = new out10Struct();
						// ###############################

						/**
						 * [tMap_5 begin ] stop
						 */

						/**
						 * [tSplitRow_4 begin ] start
						 */

						ok_Hash.put("tSplitRow_4", false);
						start_Hash.put("tSplitRow_4", System
								.currentTimeMillis());
						currentComponent = "tSplitRow_4";

						int tos_count_tSplitRow_4 = 0;
						int nb_line_tSplitRow_4 = 0;

						/**
						 * [tSplitRow_4 begin ] stop
						 */

						/**
						 * [tReplicate_1 begin ] start
						 */

						ok_Hash.put("tReplicate_1", false);
						start_Hash.put("tReplicate_1", System
								.currentTimeMillis());
						currentComponent = "tReplicate_1";

						int tos_count_tReplicate_1 = 0;

						/**
						 * [tReplicate_1 begin ] stop
						 */

						/**
						 * [tLogRow_6 begin ] start
						 */

						ok_Hash.put("tLogRow_6", false);
						start_Hash.put("tLogRow_6", System.currentTimeMillis());
						currentComponent = "tLogRow_6";

						int tos_count_tLogRow_6 = 0;

						/**
						 * [tLogRow_6 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_4", false);
						start_Hash.put("tFileOutputDelimited_4", System
								.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_4";

						int tos_count_tFileOutputDelimited_4 = 0;

						String fileName_tFileOutputDelimited_4 = "";
						fileName_tFileOutputDelimited_4 = (new java.io.File(
								context.workPath + "hgnc4.tsv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_4 = null;
						String extension_tFileOutputDelimited_4 = null;
						String directory_tFileOutputDelimited_4 = null;
						if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") < fileName_tFileOutputDelimited_4
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
									.substring(0,
											fileName_tFileOutputDelimited_4
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_4
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(0,
												fileName_tFileOutputDelimited_4
														.lastIndexOf("."));
								extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
										.substring(fileName_tFileOutputDelimited_4
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
								extension_tFileOutputDelimited_4 = "";
							}
							directory_tFileOutputDelimited_4 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_4 = true;
						java.io.File filetFileOutputDelimited_4 = new java.io.File(
								fileName_tFileOutputDelimited_4);
						globalMap.put("tFileOutputDelimited_4_FILE_NAME",
								fileName_tFileOutputDelimited_4);

						int nb_line_tFileOutputDelimited_4 = 0;
						int splitEvery_tFileOutputDelimited_4 = 1000;
						int splitedFileNo_tFileOutputDelimited_4 = 0;
						int currentRow_tFileOutputDelimited_4 = 0;

						final String OUT_DELIM_tFileOutputDelimited_4 = /**
						 * Start
						 * field tFileOutputDelimited_4:FIELDSEPARATOR
						 */
						"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
						;

						final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
						 * 
						 * Start field tFileOutputDelimited_4:ROWSEPARATOR
						 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
						;

						// create directory only if not exists
						if (directory_tFileOutputDelimited_4 != null
								&& directory_tFileOutputDelimited_4.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
									directory_tFileOutputDelimited_4);
							if (!dir_tFileOutputDelimited_4.exists()) {
								dir_tFileOutputDelimited_4.mkdirs();
							}
						}

						// routines.system.Row
						java.io.Writer outtFileOutputDelimited_4 = null;
						try {
							outtFileOutputDelimited_4 = new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_4,
													false), "ISO-8859-15"));

							/**
							 * [tFileOutputDelimited_4 begin ] stop
							 */

							/**
							 * [tFlowMeter_34 begin ] start
							 */

							ok_Hash.put("tFlowMeter_34", false);
							start_Hash.put("tFlowMeter_34", System
									.currentTimeMillis());
							currentComponent = "tFlowMeter_34";

							int tos_count_tFlowMeter_34 = 0;

							int count_tFlowMeter_34 = 0;

							/**
							 * [tFlowMeter_34 begin ] stop
							 */

							/**
							 * [tLogRow_5 begin ] start
							 */

							ok_Hash.put("tLogRow_5", false);
							start_Hash.put("tLogRow_5", System
									.currentTimeMillis());
							currentComponent = "tLogRow_5";

							int tos_count_tLogRow_5 = 0;

							/**
							 * [tLogRow_5 begin ] stop
							 */

							/**
							 * [tMap_4 begin ] start
							 */

							ok_Hash.put("tMap_4", false);
							start_Hash
									.put("tMap_4", System.currentTimeMillis());
							currentComponent = "tMap_4";

							int tos_count_tMap_4 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							// ###############################

							// ###############################
							// # Outputs initialization
							out9Struct out9_tmp = new out9Struct();
							// ###############################

							/**
							 * [tMap_4 begin ] stop
							 */

							/**
							 * [tNormalize_2 begin ] start
							 */

							ok_Hash.put("tNormalize_2", false);
							start_Hash.put("tNormalize_2", System
									.currentTimeMillis());
							currentComponent = "tNormalize_2";

							int tos_count_tNormalize_2 = 0;

							int nb_line_tNormalize_2 = 0;
							String tmp_tNormalize_2 = null;
							StringBuilder currentRecord_tNormalize_2 = null;
							String[] normalizeRecord_tNormalize_2 = null;
							java.util.Set<String> recordSet_tNormalize_2 = new java.util.HashSet<String>();

							/**
							 * [tNormalize_2 begin ] stop
							 */

							/**
							 * [tSplitRow_6 begin ] start
							 */

							ok_Hash.put("tSplitRow_6", false);
							start_Hash.put("tSplitRow_6", System
									.currentTimeMillis());
							currentComponent = "tSplitRow_6";

							int tos_count_tSplitRow_6 = 0;
							int nb_line_tSplitRow_6 = 0;

							/**
							 * [tSplitRow_6 begin ] stop
							 */

							/**
							 * [tReplicate_3 begin ] start
							 */

							ok_Hash.put("tReplicate_3", false);
							start_Hash.put("tReplicate_3", System
									.currentTimeMillis());
							currentComponent = "tReplicate_3";

							int tos_count_tReplicate_3 = 0;

							/**
							 * [tReplicate_3 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_1", false);
							start_Hash.put("tFileOutputDelimited_1", System
									.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_1";

							int tos_count_tFileOutputDelimited_1 = 0;

							String fileName_tFileOutputDelimited_1 = "";
							fileName_tFileOutputDelimited_1 = (new java.io.File(
									context.workPath + "hgnc3.tsv"))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_1 = null;
							String extension_tFileOutputDelimited_1 = null;
							String directory_tFileOutputDelimited_1 = null;
							if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_1
										.lastIndexOf(".") < fileName_tFileOutputDelimited_1
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(0,
													fileName_tFileOutputDelimited_1
															.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_1
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(0,
													fileName_tFileOutputDelimited_1
															.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								}
								directory_tFileOutputDelimited_1 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_1 = true;
							java.io.File filetFileOutputDelimited_1 = new java.io.File(
									fileName_tFileOutputDelimited_1);
							globalMap.put("tFileOutputDelimited_1_FILE_NAME",
									fileName_tFileOutputDelimited_1);

							int nb_line_tFileOutputDelimited_1 = 0;
							int splitEvery_tFileOutputDelimited_1 = 1000;
							int splitedFileNo_tFileOutputDelimited_1 = 0;
							int currentRow_tFileOutputDelimited_1 = 0;

							final String OUT_DELIM_tFileOutputDelimited_1 = /**
							 * 
							 * Start field tFileOutputDelimited_1:FIELDSEPARATOR
							 */
							"\t"/**
							 * End field
							 * tFileOutputDelimited_1:FIELDSEPARATOR
							 */
							;

							final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
							 * 
							 * Start field tFileOutputDelimited_1:ROWSEPARATOR
							 */
							"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
							;

							// create directory only if not exists
							if (directory_tFileOutputDelimited_1 != null
									&& directory_tFileOutputDelimited_1.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
										directory_tFileOutputDelimited_1);
								if (!dir_tFileOutputDelimited_1.exists()) {
									dir_tFileOutputDelimited_1.mkdirs();
								}
							}

							// routines.system.Row
							java.io.Writer outtFileOutputDelimited_1 = null;
							try {
								outtFileOutputDelimited_1 = new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_1,
														false), "ISO-8859-15"));

								/**
								 * [tFileOutputDelimited_1 begin ] stop
								 */

								/**
								 * [tFlowMeter_32 begin ] start
								 */

								ok_Hash.put("tFlowMeter_32", false);
								start_Hash.put("tFlowMeter_32", System
										.currentTimeMillis());
								currentComponent = "tFlowMeter_32";

								int tos_count_tFlowMeter_32 = 0;

								int count_tFlowMeter_32 = 0;

								/**
								 * [tFlowMeter_32 begin ] stop
								 */

								/**
								 * [tLogRow_2 begin ] start
								 */

								ok_Hash.put("tLogRow_2", false);
								start_Hash.put("tLogRow_2", System
										.currentTimeMillis());
								currentComponent = "tLogRow_2";

								int tos_count_tLogRow_2 = 0;

								/**
								 * [tLogRow_2 begin ] stop
								 */

								/**
								 * [tReplace_1 begin ] start
								 */

								ok_Hash.put("tReplace_1", false);
								start_Hash.put("tReplace_1", System
										.currentTimeMillis());
								currentComponent = "tReplace_1";

								int tos_count_tReplace_1 = 0;

								int nb_line_tReplace_1 = 0;
								int nb_line_ok_tReplace_1 = 0;

								/**
								 * [tReplace_1 begin ] stop
								 */

								/**
								 * [tMap_1 begin ] start
								 */

								ok_Hash.put("tMap_1", false);
								start_Hash.put("tMap_1", System
										.currentTimeMillis());
								currentComponent = "tMap_1";

								int tos_count_tMap_1 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								// ###############################

								// ###############################
								// # Outputs initialization
								out7Struct out7_tmp = new out7Struct();
								// ###############################

								/**
								 * [tMap_1 begin ] stop
								 */

								/**
								 * [tNormalize_1 begin ] start
								 */

								ok_Hash.put("tNormalize_1", false);
								start_Hash.put("tNormalize_1", System
										.currentTimeMillis());
								currentComponent = "tNormalize_1";

								int tos_count_tNormalize_1 = 0;

								int nb_line_tNormalize_1 = 0;
								String tmp_tNormalize_1 = null;
								StringBuilder currentRecord_tNormalize_1 = null;
								String[] normalizeRecord_tNormalize_1 = null;
								java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

								/**
								 * [tNormalize_1 begin ] stop
								 */

								/**
								 * [tSplitRow_3 begin ] start
								 */

								ok_Hash.put("tSplitRow_3", false);
								start_Hash.put("tSplitRow_3", System
										.currentTimeMillis());
								currentComponent = "tSplitRow_3";

								int tos_count_tSplitRow_3 = 0;
								int nb_line_tSplitRow_3 = 0;

								/**
								 * [tSplitRow_3 begin ] stop
								 */

								/**
								 * [tReplicate_5 begin ] start
								 */

								ok_Hash.put("tReplicate_5", false);
								start_Hash.put("tReplicate_5", System
										.currentTimeMillis());
								currentComponent = "tReplicate_5";

								int tos_count_tReplicate_5 = 0;

								/**
								 * [tReplicate_5 begin ] stop
								 */

								/**
								 * [tMap_2 begin ] start
								 */

								ok_Hash.put("tMap_2", false);
								start_Hash.put("tMap_2", System
										.currentTimeMillis());
								currentComponent = "tMap_2";

								int tos_count_tMap_2 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_2__Struct {
									String nsid;
									String title;
									String bmuri;
									String id;
								}
								Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								out1Struct out1_tmp = new out1Struct();
								out3Struct out3_tmp = new out3Struct();
								out5Struct out5_tmp = new out5Struct();
								// ###############################

								/**
								 * [tMap_2 begin ] stop
								 */

								/**
								 * [tFileInputDelimited_1 begin ] start
								 */

								ok_Hash.put("tFileInputDelimited_1", false);
								start_Hash.put("tFileInputDelimited_1", System
										.currentTimeMillis());
								currentComponent = "tFileInputDelimited_1";

								int tos_count_tFileInputDelimited_1 = 0;

								class RowHelper_tFileInputDelimited_1 {

									public void valueToConn(
											org.talend.fileprocess.FileInputDelimited fid,
											row1Struct row1) throws Exception {

										row1.HGNC_ID = fid.get(0);

										row1.ApprovedSymbol = fid.get(1);

										row1.ApprovedName = fid.get(2);

										row1.Status = fid.get(3);

										row1.LocusType = fid.get(4);

										row1.LocusGroup = fid.get(5);

										row1.PreviousSymbols = fid.get(6);

										row1.PreviousNames = fid.get(7);

										row1.Synonyms = fid.get(8);

										row1.NameSynonyms = fid.get(9);

										row1.Chromosome = fid.get(10);

										row1.DateApproved = fid.get(11);

										row1.DateModified = fid.get(12);

										row1.DateSymbolChanged = fid.get(13);

										row1.DateNameChanged = fid.get(14);

										row1.AccessionNumbers = fid.get(15);

										row1.EnzymeIDs = fid.get(16);

										row1.EntrezGeneID = fid.get(17);

										row1.EnsemblGeneID = fid.get(18);

										row1.MouseGenomeDatabaseID = fid
												.get(19);

										row1.SpecialistDatabaseLinks = fid
												.get(20);

										row1.SpecialistDatabaseIDs = fid
												.get(21);

										row1.PubmedIDs = fid.get(22);

										row1.RefSeqIDs = fid.get(23);

										row1.GeneFamilyTag = fid.get(24);

										row1.GeneFamilyDescription = fid
												.get(25);

										row1.RecordType = fid.get(26);

										row1.PrimaryIDs = fid.get(27);

										row1.SecondaryIDs = fid.get(28);

										row1.CCDS_IDs = fid.get(29);

										row1.VEGA_IDs = fid.get(30);

										row1.LocusSpecificDatabases = fid
												.get(31);

										row1.GDB_ID = fid.get(32);

										row1.EntrezGene_ID_mapped = fid.get(33);

										row1.OMIM_ID = fid.get(34);

										row1.RefSeq_ID = fid.get(35);

										row1.UniProt_ID = fid.get(36);

										row1.Ensembl_ID = fid.get(37);

										row1.UCSC_ID = fid.get(38);

										row1.MGI_ID_mapped = fid.get(39);

										row1.RGD_ID = fid.get(40);

									}

								}
								RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

								int nb_line_tFileInputDelimited_1 = 0;
								org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
								try {

									Object filename_tFileInputDelimited_1 = context.workPath
											+ "/hgnc.tab";
									if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

										int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
										if (footer_value_tFileInputDelimited_1 > 0
												|| random_value_tFileInputDelimited_1 > 0) {
											throw new Exception(
													"When the input source is a stream,footer and random shouldn't be bigger than 0.");
										}

									}
									try {
										fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
												context.workPath + "/hgnc.tab",
												"ISO-8859-15", "\t", "\n",
												true, 1, 0, -1, -1, false);
									} catch (Exception e) {

										System.err.println(e.getMessage());

									}

									while (fid_tFileInputDelimited_1 != null
											&& fid_tFileInputDelimited_1
													.nextRecord()) {

										row1 = null;

										boolean whetherReject_tFileInputDelimited_1 = false;
										row1 = new row1Struct();
										try {

											rowHelper_tFileInputDelimited_1
													.valueToConn(
															fid_tFileInputDelimited_1,
															row1);

										} catch (Exception e) {
											whetherReject_tFileInputDelimited_1 = true;

											System.err.println(e.getMessage());
											row1 = null;

										}

										/**
										 * [tFileInputDelimited_1 begin ] stop
										 */
										/**
										 * [tFileInputDelimited_1 main ] start
										 */

										currentComponent = "tFileInputDelimited_1";

										tos_count_tFileInputDelimited_1++;

										/**
										 * [tFileInputDelimited_1 main ] stop
										 */
										// Start of branch "row1"
										if (row1 != null) {

											/**
											 * [tMap_2 main ] start
											 */

											currentComponent = "tMap_2";

											boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_2 = false;
											boolean mainRowRejected_tMap_2 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_2__Struct Var = Var__tMap_2;
												Var.nsid = row1.HGNC_ID
														.toLowerCase();
												Var.title = row1.ApprovedName;
												Var.bmuri = "bm:" + Var.nsid;
												Var.id = row1.HGNC_ID
														.substring(5);// ###############################
												// ###############################
												// # Output tables

												out1 = null;
												out3 = null;
												out5 = null;

												// # Output table : 'out1'
												out1_tmp.nsid = Var.nsid;
												out1_tmp.title = Var.title;
												out1_tmp.bmuri = Var.bmuri;
												out1_tmp.id = Var.id;
												out1_tmp.HGNC_ID = row1.HGNC_ID;
												out1_tmp.ApprovedSymbol = row1.ApprovedSymbol;
												out1_tmp.ApprovedName = row1.ApprovedName;
												out1_tmp.Status = row1.Status;
												out1_tmp.LocusType = row1.LocusType;
												out1_tmp.LocusGroup = row1.LocusGroup;
												out1_tmp.PreviousSymbols = row1.PreviousSymbols;
												out1_tmp.PreviousNames = row1.PreviousNames;
												out1_tmp.Synonyms = row1.Synonyms;
												out1_tmp.NameSynonyms = row1.NameSynonyms;
												out1_tmp.Chromosome = row1.Chromosome;
												out1_tmp.DateApproved = row1.DateApproved;
												out1_tmp.DateModified = row1.DateModified;
												out1_tmp.DateSymbolChanged = row1.DateSymbolChanged;
												out1_tmp.DateNameChanged = row1.DateNameChanged;
												out1_tmp.AccessionNumbers = row1.AccessionNumbers;
												out1_tmp.EnzymeIDs = row1.EnzymeIDs;
												out1_tmp.EntrezGeneID = row1.EntrezGeneID;
												out1_tmp.EnsemblGeneID = row1.EnsemblGeneID;
												out1_tmp.MouseGenomeDatabaseID = row1.MouseGenomeDatabaseID;
												out1_tmp.SpecialistDatabaseLinks = row1.SpecialistDatabaseLinks;
												out1_tmp.SpecialistDatabaseIDs = row1.SpecialistDatabaseIDs;
												out1_tmp.PubmedIDs = row1.PubmedIDs;
												out1_tmp.RefSeqIDs = row1.RefSeqIDs;
												out1_tmp.GeneFamilyTag = row1.GeneFamilyTag;
												out1_tmp.GeneFamilyDescription = row1.GeneFamilyDescription;
												out1_tmp.RecordType = row1.RecordType;
												out1_tmp.PrimaryIDs = row1.PrimaryIDs;
												out1_tmp.SecondaryIDs = row1.SecondaryIDs;
												out1_tmp.CCDS_IDs = row1.CCDS_IDs;
												out1_tmp.VEGA_IDs = row1.VEGA_IDs;
												out1_tmp.LocusSpecificDatabases = row1.LocusSpecificDatabases;
												out1_tmp.GDB_ID = row1.GDB_ID;
												out1_tmp.EntrezGene_ID_mapped = row1.EntrezGene_ID_mapped;
												out1_tmp.OMIM_ID = row1.OMIM_ID;
												out1_tmp.RefSeq_ID = row1.RefSeq_ID;
												out1_tmp.UniProt_ID = row1.UniProt_ID;
												out1_tmp.Ensembl_ID = row1.Ensembl_ID;
												out1_tmp.UCSC_ID = row1.UCSC_ID;
												out1_tmp.MGI_ID_mapped = row1.MGI_ID_mapped;
												out1_tmp.RGD_ID = row1.RGD_ID;
												out1 = out1_tmp;

												// # Output table : 'out3'
												out3_tmp.bmuri = Var.bmuri;
												out3_tmp.PreviousSymbols = row1.PreviousSymbols;
												out3_tmp.PreviousNames = row1.PreviousNames;
												out3_tmp.Synonyms = row1.Synonyms;
												out3_tmp.NameSynonyms = row1.NameSynonyms;
												out3 = out3_tmp;

												// # Output table : 'out5'
												out5_tmp.bmuri = Var.bmuri;
												out5_tmp.AccessionNumbers = row1.AccessionNumbers;
												out5_tmp.EnzymeIDs = row1.EnzymeIDs;
												out5_tmp.PubmedIDs = row1.PubmedIDs;
												out5_tmp.RefSeqIDs = row1.RefSeqIDs;
												out5_tmp.CCDS_IDs = row1.CCDS_IDs;
												out5_tmp.VEGA_IDs = row1.VEGA_IDs;
												out5 = out5_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_2 = false;

											tos_count_tMap_2++;

											/**
											 * [tMap_2 main ] stop
											 */
											// Start of branch "out1"
											if (out1 != null) {

												/**
												 * [tLogRow_6 main ] start
												 */

												currentComponent = "tLogRow_6";

												row15 = out1;

												tos_count_tLogRow_6++;

												/**
												 * [tLogRow_6 main ] stop
												 */

												/**
												 * [tReplicate_1 main ] start
												 */

												currentComponent = "tReplicate_1";

												row8 = new row8Struct();

												row8.nsid = row15.nsid;
												row8.title = row15.title;
												row8.bmuri = row15.bmuri;
												row8.id = row15.id;
												row8.HGNC_ID = row15.HGNC_ID;
												row8.ApprovedSymbol = row15.ApprovedSymbol;
												row8.ApprovedName = row15.ApprovedName;
												row8.Status = row15.Status;
												row8.LocusType = row15.LocusType;
												row8.LocusGroup = row15.LocusGroup;
												row8.PreviousSymbols = row15.PreviousSymbols;
												row8.PreviousNames = row15.PreviousNames;
												row8.Synonyms = row15.Synonyms;
												row8.NameSynonyms = row15.NameSynonyms;
												row8.Chromosome = row15.Chromosome;
												row8.DateApproved = row15.DateApproved;
												row8.DateModified = row15.DateModified;
												row8.DateSymbolChanged = row15.DateSymbolChanged;
												row8.DateNameChanged = row15.DateNameChanged;
												row8.AccessionNumbers = row15.AccessionNumbers;
												row8.EnzymeIDs = row15.EnzymeIDs;
												row8.EntrezGeneID = row15.EntrezGeneID;
												row8.EnsemblGeneID = row15.EnsemblGeneID;
												row8.MouseGenomeDatabaseID = row15.MouseGenomeDatabaseID;
												row8.SpecialistDatabaseLinks = row15.SpecialistDatabaseLinks;
												row8.SpecialistDatabaseIDs = row15.SpecialistDatabaseIDs;
												row8.PubmedIDs = row15.PubmedIDs;
												row8.RefSeqIDs = row15.RefSeqIDs;
												row8.GeneFamilyTag = row15.GeneFamilyTag;
												row8.GeneFamilyDescription = row15.GeneFamilyDescription;
												row8.RecordType = row15.RecordType;
												row8.PrimaryIDs = row15.PrimaryIDs;
												row8.SecondaryIDs = row15.SecondaryIDs;
												row8.CCDS_IDs = row15.CCDS_IDs;
												row8.VEGA_IDs = row15.VEGA_IDs;
												row8.LocusSpecificDatabases = row15.LocusSpecificDatabases;
												row8.GDB_ID = row15.GDB_ID;
												row8.EntrezGene_ID_mapped = row15.EntrezGene_ID_mapped;
												row8.OMIM_ID = row15.OMIM_ID;
												row8.RefSeq_ID = row15.RefSeq_ID;
												row8.UniProt_ID = row15.UniProt_ID;
												row8.Ensembl_ID = row15.Ensembl_ID;
												row8.UCSC_ID = row15.UCSC_ID;
												row8.MGI_ID_mapped = row15.MGI_ID_mapped;
												row8.RGD_ID = row15.RGD_ID;
												row9 = new row9Struct();

												row9.nsid = row15.nsid;
												row9.title = row15.title;
												row9.bmuri = row15.bmuri;
												row9.id = row15.id;
												row9.HGNC_ID = row15.HGNC_ID;
												row9.ApprovedSymbol = row15.ApprovedSymbol;
												row9.ApprovedName = row15.ApprovedName;
												row9.Status = row15.Status;
												row9.LocusType = row15.LocusType;
												row9.LocusGroup = row15.LocusGroup;
												row9.PreviousSymbols = row15.PreviousSymbols;
												row9.PreviousNames = row15.PreviousNames;
												row9.Synonyms = row15.Synonyms;
												row9.NameSynonyms = row15.NameSynonyms;
												row9.Chromosome = row15.Chromosome;
												row9.DateApproved = row15.DateApproved;
												row9.DateModified = row15.DateModified;
												row9.DateSymbolChanged = row15.DateSymbolChanged;
												row9.DateNameChanged = row15.DateNameChanged;
												row9.AccessionNumbers = row15.AccessionNumbers;
												row9.EnzymeIDs = row15.EnzymeIDs;
												row9.EntrezGeneID = row15.EntrezGeneID;
												row9.EnsemblGeneID = row15.EnsemblGeneID;
												row9.MouseGenomeDatabaseID = row15.MouseGenomeDatabaseID;
												row9.SpecialistDatabaseLinks = row15.SpecialistDatabaseLinks;
												row9.SpecialistDatabaseIDs = row15.SpecialistDatabaseIDs;
												row9.PubmedIDs = row15.PubmedIDs;
												row9.RefSeqIDs = row15.RefSeqIDs;
												row9.GeneFamilyTag = row15.GeneFamilyTag;
												row9.GeneFamilyDescription = row15.GeneFamilyDescription;
												row9.RecordType = row15.RecordType;
												row9.PrimaryIDs = row15.PrimaryIDs;
												row9.SecondaryIDs = row15.SecondaryIDs;
												row9.CCDS_IDs = row15.CCDS_IDs;
												row9.VEGA_IDs = row15.VEGA_IDs;
												row9.LocusSpecificDatabases = row15.LocusSpecificDatabases;
												row9.GDB_ID = row15.GDB_ID;
												row9.EntrezGene_ID_mapped = row15.EntrezGene_ID_mapped;
												row9.OMIM_ID = row15.OMIM_ID;
												row9.RefSeq_ID = row15.RefSeq_ID;
												row9.UniProt_ID = row15.UniProt_ID;
												row9.Ensembl_ID = row15.Ensembl_ID;
												row9.UCSC_ID = row15.UCSC_ID;
												row9.MGI_ID_mapped = row15.MGI_ID_mapped;
												row9.RGD_ID = row15.RGD_ID;

												tos_count_tReplicate_1++;

												/**
												 * [tReplicate_1 main ] stop
												 */

												/**
												 * [tSplitRow_1 main ] start
												 */

												currentComponent = "tSplitRow_1";

												java.util.List<row5Struct> rows_tSplitRow_1 = new java.util.ArrayList<row5Struct>(
														6);
												row5Struct rowTmp_tSplitRow_1 = null;

												// cache output rows for the
												// loop
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "dc:identifier";
												rowTmp_tSplitRow_1.object = row8.nsid;
												rowTmp_tSplitRow_1.literal = true;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "rdf:type";
												rowTmp_tSplitRow_1.object = "bm:hgnc_vocabulary:Gene";
												rowTmp_tSplitRow_1.literal = false;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "rdfs:label";
												rowTmp_tSplitRow_1.object = row8.title
														+ " ["
														+ row8.nsid
														+ "]";
												rowTmp_tSplitRow_1.literal = true;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "dc:title";
												rowTmp_tSplitRow_1.object = row8.title;
												rowTmp_tSplitRow_1.literal = true;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "owl:sameAs";
												rowTmp_tSplitRow_1.object = "bm:hgnc:"
														+ row8.ApprovedSymbol;
												rowTmp_tSplitRow_1.literal = false;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;
												rowTmp_tSplitRow_1 = new row5Struct();

												rowTmp_tSplitRow_1.subject = row8.bmuri;
												rowTmp_tSplitRow_1.predicate = "bio2rdf:url";
												rowTmp_tSplitRow_1.object = "http://www.genenames.org/data/hgnc_data.php?hgnc_id="
														+ row8.id;
												rowTmp_tSplitRow_1.literal = true;
												rows_tSplitRow_1
														.add(rowTmp_tSplitRow_1);
												nb_line_tSplitRow_1++;

												for (row5Struct row_tSplitRow_1 : rows_tSplitRow_1) {// C_01
													row5 = row_tSplitRow_1;

													tos_count_tSplitRow_1++;

													/**
													 * [tSplitRow_1 main ] stop
													 */
													// Start of branch "row5"
													if (row5 != null) {

														/**
														 * [tLogRow_4 main ]
														 * start
														 */

														currentComponent = "tLogRow_4";

														hgnc1 = row5;

														tos_count_tLogRow_4++;

														/**
														 * [tLogRow_4 main ]
														 * stop
														 */

														/**
														 * [tFlowMeter_25 main ]
														 * start
														 */

														currentComponent = "tFlowMeter_25";

														count_tFlowMeter_25++;

														row17 = hgnc1;

														tos_count_tFlowMeter_25++;

														/**
														 * [tFlowMeter_25 main ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_14";

														StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();

														if (row17.subject != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	row17.subject

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (row17.predicate != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	row17.predicate

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (row17.object != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	row17.object

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (row17.literal != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	row17.literal

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);

														nb_line_tFileOutputDelimited_14++;

														outtFileOutputDelimited_14
																.write(sb_tFileOutputDelimited_14
																		.toString());

														tos_count_tFileOutputDelimited_14++;

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] stop
														 */

													} // End of branch "row5"

												} // C_01

												/**
												 * [tSplitRow_4 main ] start
												 */

												currentComponent = "tSplitRow_4";

												java.util.List<row2Struct> rows_tSplitRow_4 = new java.util.ArrayList<row2Struct>(
														25);
												row2Struct rowTmp_tSplitRow_4 = null;

												// cache output rows for the
												// loop
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:";
												rowTmp_tSplitRow_4.object = row8.nsid;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:ApprovedSymbol";
												rowTmp_tSplitRow_4.object = row8.ApprovedSymbol;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:ApprovedName";
												rowTmp_tSplitRow_4.object = row8.ApprovedName;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:xStatus";
												rowTmp_tSplitRow_4.object = "bm:hgnc:status:"
														+ row8.Status;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:xLocusType";
												rowTmp_tSplitRow_4.object = "bm:hgnc:locustype:"
														+ row8.LocusType;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:xLocusGroup";
												rowTmp_tSplitRow_4.object = "bm:hgnc:locusgroup:"
														+ row8.LocusGroup;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:Chromosome";
												rowTmp_tSplitRow_4.object = row8.Chromosome;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:DateApproved";
												rowTmp_tSplitRow_4.object = row8.DateApproved;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:DateModified";
												rowTmp_tSplitRow_4.object = row8.DateModified;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:DateSymbolChanged";
												rowTmp_tSplitRow_4.object = row8.DateSymbolChanged;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:DateNameChanged";
												rowTmp_tSplitRow_4.object = row8.DateNameChanged;
												rowTmp_tSplitRow_4.literal = true;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:xGeneFamilyTag";
												rowTmp_tSplitRow_4.object = "bm:hgnc:gene_family:"
														+ row8.GeneFamilyTag;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "hgnc_vocabulary:xRecordType";
												rowTmp_tSplitRow_4.object = "bm:hgnc:type:"
														+ row8.RecordType;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xEntrezGene";
												rowTmp_tSplitRow_4.object = "bm:entrez_gene:"
														+ row8.EntrezGeneID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xEnsembl";
												rowTmp_tSplitRow_4.object = "bm:ensembl:"
														+ row8.EnsemblGeneID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xMGI";
												rowTmp_tSplitRow_4.object = "bm:"
														+ row8.MouseGenomeDatabaseID
																.toLowerCase();
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xGDB";
												rowTmp_tSplitRow_4.object = "bm:gdb:"
														+ row8.GDB_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xEntrezGeneMapped";
												rowTmp_tSplitRow_4.object = "bm:entrez_gene:"
														+ row8.EntrezGene_ID_mapped;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xOMIM";
												rowTmp_tSplitRow_4.object = "bm:omim:"
														+ row8.OMIM_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xRefSeq";
												rowTmp_tSplitRow_4.object = "bm:refseq:"
														+ row8.RefSeq_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xUniProt";
												rowTmp_tSplitRow_4.object = "bm:uniprot:"
														+ row8.UniProt_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xEnsembl";
												rowTmp_tSplitRow_4.object = "bm:ensembl:"
														+ row8.Ensembl_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xUCSC";
												rowTmp_tSplitRow_4.object = "bm:ucsc:"
														+ row8.UCSC_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xMGIMapped";
												rowTmp_tSplitRow_4.object = "bm:"
														+ row8.MGI_ID_mapped
																.toLowerCase();
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;
												rowTmp_tSplitRow_4 = new row2Struct();

												rowTmp_tSplitRow_4.subject = row8.bmuri;
												rowTmp_tSplitRow_4.predicate = "bio2rdf:xRGD";
												rowTmp_tSplitRow_4.object = "bm:rgd:"
														+ row8.RGD_ID;
												rowTmp_tSplitRow_4.literal = false;
												rows_tSplitRow_4
														.add(rowTmp_tSplitRow_4);
												nb_line_tSplitRow_4++;

												for (row2Struct row_tSplitRow_4 : rows_tSplitRow_4) {// C_01
													row2 = row_tSplitRow_4;

													tos_count_tSplitRow_4++;

													/**
													 * [tSplitRow_4 main ] stop
													 */
													// Start of branch "row2"
													if (row2 != null) {

														/**
														 * [tMap_5 main ] start
														 */

														currentComponent = "tMap_5";

														boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_5 = false;
														boolean mainRowRejected_tMap_5 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables
															// ###############################
															// ###############################
															// # Output tables

															out10 = null;

															// # Output table :
															// 'out10'
															out10_tmp.subject = row2.subject;
															out10_tmp.predicate = row2.predicate;
															out10_tmp.object = row2.object;
															out10_tmp.literal = row2.literal;
															out10 = out10_tmp;
															// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_5 = false;

														tos_count_tMap_5++;

														/**
														 * [tMap_5 main ] stop
														 */
														// Start of branch
														// "out10"
														if (out10 != null) {

															/**
															 * [tLogRow_3 main ]
															 * start
															 */

															currentComponent = "tLogRow_3";

															hgnc2 = out10;

															tos_count_tLogRow_3++;

															/**
															 * [tLogRow_3 main ]
															 * stop
															 */

															/**
															 * [tFlowMeter_30
															 * main ] start
															 */

															currentComponent = "tFlowMeter_30";

															count_tFlowMeter_30++;

															row18 = hgnc2;

															tos_count_tFlowMeter_30++;

															/**
															 * [tFlowMeter_30
															 * main ] stop
															 */

															/**
															 * [
															 * tFileOutputDelimited_2
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_2";

															StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

															if (row18.subject != null) {

																sb_tFileOutputDelimited_2
																		.append(

																		row18.subject

																		);

															}

															sb_tFileOutputDelimited_2
																	.append(OUT_DELIM_tFileOutputDelimited_2);

															if (row18.predicate != null) {

																sb_tFileOutputDelimited_2
																		.append(

																		row18.predicate

																		);

															}

															sb_tFileOutputDelimited_2
																	.append(OUT_DELIM_tFileOutputDelimited_2);

															if (row18.object != null) {

																sb_tFileOutputDelimited_2
																		.append(

																		row18.object

																		);

															}

															sb_tFileOutputDelimited_2
																	.append(OUT_DELIM_tFileOutputDelimited_2);

															if (row18.literal != null) {

																sb_tFileOutputDelimited_2
																		.append(

																		row18.literal

																		);

															}

															sb_tFileOutputDelimited_2
																	.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

															nb_line_tFileOutputDelimited_2++;

															outtFileOutputDelimited_2
																	.write(sb_tFileOutputDelimited_2
																			.toString());

															tos_count_tFileOutputDelimited_2++;

															/**
															 * [
															 * tFileOutputDelimited_2
															 * main ] stop
															 */

														} // End of branch
															// "out10"

													} // End of branch "row2"

												} // C_01

											} // End of branch "out1"

											// Start of branch "out3"
											if (out3 != null) {

												/**
												 * [tReplicate_3 main ] start
												 */

												currentComponent = "tReplicate_3";

												out6 = new out6Struct();

												out6.bmuri = out3.bmuri;
												out6.PreviousSymbols = out3.PreviousSymbols;
												out6.PreviousNames = out3.PreviousNames;
												out6.Synonyms = out3.Synonyms;
												out6.NameSynonyms = out3.NameSynonyms;

												tos_count_tReplicate_3++;

												/**
												 * [tReplicate_3 main ] stop
												 */

												/**
												 * [tSplitRow_6 main ] start
												 */

												currentComponent = "tSplitRow_6";

												java.util.List<row12Struct> rows_tSplitRow_6 = new java.util.ArrayList<row12Struct>(
														4);
												row12Struct rowTmp_tSplitRow_6 = null;

												// cache output rows for the
												// loop
												rowTmp_tSplitRow_6 = new row12Struct();

												rowTmp_tSplitRow_6.subject = out6.bmuri;
												rowTmp_tSplitRow_6.predicate = "hgnc_vocabulary:PreviousSymbols";
												rowTmp_tSplitRow_6.object = out6.PreviousSymbols;
												rowTmp_tSplitRow_6.literal = true;
												rows_tSplitRow_6
														.add(rowTmp_tSplitRow_6);
												nb_line_tSplitRow_6++;
												rowTmp_tSplitRow_6 = new row12Struct();

												rowTmp_tSplitRow_6.subject = out6.bmuri;
												rowTmp_tSplitRow_6.predicate = "hgnc_vocabulary:PreviousSymbols";
												rowTmp_tSplitRow_6.object = out6.PreviousNames;
												rowTmp_tSplitRow_6.literal = true;
												rows_tSplitRow_6
														.add(rowTmp_tSplitRow_6);
												nb_line_tSplitRow_6++;
												rowTmp_tSplitRow_6 = new row12Struct();

												rowTmp_tSplitRow_6.subject = out6.bmuri;
												rowTmp_tSplitRow_6.predicate = "hgnc_vocabulary:PreviousSymbols";
												rowTmp_tSplitRow_6.object = out6.Synonyms;
												rowTmp_tSplitRow_6.literal = true;
												rows_tSplitRow_6
														.add(rowTmp_tSplitRow_6);
												nb_line_tSplitRow_6++;
												rowTmp_tSplitRow_6 = new row12Struct();

												rowTmp_tSplitRow_6.subject = out6.bmuri;
												rowTmp_tSplitRow_6.predicate = "hgnc_vocabulary:NameSynonyms";
												rowTmp_tSplitRow_6.object = out6.NameSynonyms;
												rowTmp_tSplitRow_6.literal = true;
												rows_tSplitRow_6
														.add(rowTmp_tSplitRow_6);
												nb_line_tSplitRow_6++;

												for (row12Struct row_tSplitRow_6 : rows_tSplitRow_6) {// C_01
													row12 = row_tSplitRow_6;

													tos_count_tSplitRow_6++;

													/**
													 * [tSplitRow_6 main ] stop
													 */
													// Start of branch "row12"
													if (row12 != null) {

														/**
														 * [tNormalize_2 main ]
														 * start
														 */

														currentComponent = "tNormalize_2";

														if (row12.object != null
																&& row12.object
																		.trim()
																		.length() > 0) {
															normalizeRecord_tNormalize_2 = row12.object
																	.split(",");
														} else {
															normalizeRecord_tNormalize_2 = new String[1];
														}
														for (int i_tNormalize_2 = 0; i_tNormalize_2 < normalizeRecord_tNormalize_2.length; i_tNormalize_2++) {
															currentRecord_tNormalize_2 = new StringBuilder();
															nb_line_tNormalize_2++;
															row14.subject = row12.subject;
															row14.predicate = row12.predicate;
															row14.object = normalizeRecord_tNormalize_2[i_tNormalize_2];
															row14.literal = row12.literal;

															tos_count_tNormalize_2++;

															/**
															 * [tNormalize_2
															 * main ] stop
															 */

															/**
															 * [tMap_4 main ]
															 * start
															 */

															currentComponent = "tMap_4";

															boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

															// ###############################
															// # Input tables
															// (lookups)
															boolean rejectedInnerJoin_tMap_4 = false;
															boolean mainRowRejected_tMap_4 = false;

															// ###############################
															{ // start of Var
																// scope

																// ###############################
																// # Vars tables
																// ###############################
																// ###############################
																// # Output
																// tables

																out9 = null;

																// # Output
																// table :
																// 'out9'
																// # Filter
																// conditions
																if (

																row14.object != null

																) {
																	out9_tmp.subject = row14.subject;
																	out9_tmp.predicate = row14.predicate;
																	out9_tmp.object = StringHandling
																			.TRIM(row14.object);
																	out9_tmp.literal = row14.literal;
																	out9 = out9_tmp;
																} // closing
																	// filter/reject
																	// ###############################

															} // end of Var
																// scope

															rejectedInnerJoin_tMap_4 = false;

															tos_count_tMap_4++;

															/**
															 * [tMap_4 main ]
															 * stop
															 */
															// Start of branch
															// "out9"
															if (out9 != null) {

																/**
																 * [tLogRow_5
																 * main ] start
																 */

																currentComponent = "tLogRow_5";

																hgnc4 = out9;

																tos_count_tLogRow_5++;

																/**
																 * [tLogRow_5
																 * main ] stop
																 */

																/**
																 * [
																 * tFlowMeter_34
																 * main ] start
																 */

																currentComponent = "tFlowMeter_34";

																count_tFlowMeter_34++;

																row20 = hgnc4;

																tos_count_tFlowMeter_34++;

																/**
																 * [
																 * tFlowMeter_34
																 * main ] stop
																 */

																/**
																 * [
																 * tFileOutputDelimited_4
																 * main ] start
																 */

																currentComponent = "tFileOutputDelimited_4";

																StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();

																if (row20.subject != null) {

																	sb_tFileOutputDelimited_4
																			.append(

																			row20.subject

																			);

																}

																sb_tFileOutputDelimited_4
																		.append(OUT_DELIM_tFileOutputDelimited_4);

																if (row20.predicate != null) {

																	sb_tFileOutputDelimited_4
																			.append(

																			row20.predicate

																			);

																}

																sb_tFileOutputDelimited_4
																		.append(OUT_DELIM_tFileOutputDelimited_4);

																if (row20.object != null) {

																	sb_tFileOutputDelimited_4
																			.append(

																			row20.object

																			);

																}

																sb_tFileOutputDelimited_4
																		.append(OUT_DELIM_tFileOutputDelimited_4);

																if (row20.literal != null) {

																	sb_tFileOutputDelimited_4
																			.append(

																			row20.literal

																			);

																}

																sb_tFileOutputDelimited_4
																		.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

																nb_line_tFileOutputDelimited_4++;

																outtFileOutputDelimited_4
																		.write(sb_tFileOutputDelimited_4
																				.toString());

																tos_count_tFileOutputDelimited_4++;

																/**
																 * [
																 * tFileOutputDelimited_4
																 * main ] stop
																 */

															} // End of branch
																// "out9"

															// end for
														}

													} // End of branch "row12"

												} // C_01

											} // End of branch "out3"

											// Start of branch "out5"
											if (out5 != null) {

												/**
												 * [tReplicate_5 main ] start
												 */

												currentComponent = "tReplicate_5";

												out4 = new out4Struct();

												out4.bmuri = out5.bmuri;
												out4.AccessionNumbers = out5.AccessionNumbers;
												out4.EnzymeIDs = out5.EnzymeIDs;
												out4.PubmedIDs = out5.PubmedIDs;
												out4.RefSeqIDs = out5.RefSeqIDs;
												out4.CCDS_IDs = out5.CCDS_IDs;
												out4.VEGA_IDs = out5.VEGA_IDs;

												tos_count_tReplicate_5++;

												/**
												 * [tReplicate_5 main ] stop
												 */

												/**
												 * [tSplitRow_3 main ] start
												 */

												currentComponent = "tSplitRow_3";

												java.util.List<row6Struct> rows_tSplitRow_3 = new java.util.ArrayList<row6Struct>(
														6);
												row6Struct rowTmp_tSplitRow_3 = null;

												// cache output rows for the
												// loop
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xAccession";
												rowTmp_tSplitRow_3.object = out4.AccessionNumbers;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xEC";
												rowTmp_tSplitRow_3.object = out4.EnzymeIDs;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xPubmed";
												rowTmp_tSplitRow_3.object = out4.PubmedIDs;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xRefSeq";
												rowTmp_tSplitRow_3.object = out4.RefSeqIDs;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xCCDS";
												rowTmp_tSplitRow_3.object = out4.CCDS_IDs;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;
												rowTmp_tSplitRow_3 = new row6Struct();

												rowTmp_tSplitRow_3.subject = out4.bmuri;
												rowTmp_tSplitRow_3.predicate = "bio2rdf:xVEGA";
												rowTmp_tSplitRow_3.object = out4.VEGA_IDs;
												rows_tSplitRow_3
														.add(rowTmp_tSplitRow_3);
												nb_line_tSplitRow_3++;

												for (row6Struct row_tSplitRow_3 : rows_tSplitRow_3) {// C_01
													row6 = row_tSplitRow_3;

													tos_count_tSplitRow_3++;

													/**
													 * [tSplitRow_3 main ] stop
													 */
													// Start of branch "row6"
													if (row6 != null) {

														/**
														 * [tNormalize_1 main ]
														 * start
														 */

														currentComponent = "tNormalize_1";

														if (row6.object != null
																&& row6.object
																		.trim()
																		.length() > 0) {
															normalizeRecord_tNormalize_1 = row6.object
																	.split(",");
														} else {
															normalizeRecord_tNormalize_1 = new String[1];
														}
														for (int i_tNormalize_1 = 0; i_tNormalize_1 < normalizeRecord_tNormalize_1.length; i_tNormalize_1++) {
															currentRecord_tNormalize_1 = new StringBuilder();
															nb_line_tNormalize_1++;
															row4.subject = row6.subject;
															row4.predicate = row6.predicate;
															row4.object = normalizeRecord_tNormalize_1[i_tNormalize_1];

															tos_count_tNormalize_1++;

															/**
															 * [tNormalize_1
															 * main ] stop
															 */

															/**
															 * [tMap_1 main ]
															 * start
															 */

															currentComponent = "tMap_1";

															boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

															// ###############################
															// # Input tables
															// (lookups)
															boolean rejectedInnerJoin_tMap_1 = false;
															boolean mainRowRejected_tMap_1 = false;

															// ###############################
															{ // start of Var
																// scope

																// ###############################
																// # Vars tables
																// ###############################
																// ###############################
																// # Output
																// tables

																out7 = null;

																// # Output
																// table :
																// 'out7'
																// # Filter
																// conditions
																if (

																row4.object != null

																) {
																	out7_tmp.subject = row4.subject;
																	out7_tmp.predicate = row4.predicate;
																	out7_tmp.object = row4.predicate
																			+ ":"
																			+ StringHandling
																					.TRIM(row4.object);
																	out7_tmp.literal = false;
																	out7 = out7_tmp;
																} // closing
																	// filter/reject
																	// ###############################

															} // end of Var
																// scope

															rejectedInnerJoin_tMap_1 = false;

															tos_count_tMap_1++;

															/**
															 * [tMap_1 main ]
															 * stop
															 */
															// Start of branch
															// "out7"
															if (out7 != null) {

																/**
																 * [tReplace_1
																 * main ] start
																 */

																currentComponent = "tReplace_1";

																String searchStr_tReplace_1_1 = "bio2rdf:xPubmed"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_1,
																				"bm:pubmed"
																						+ "",
																				false,
																				false);
																String searchStr_tReplace_1_2 = "bio2rdf:xRefSeq"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_2,
																				"bm:refseq"
																						+ "",
																				false,
																				false);
																String searchStr_tReplace_1_3 = "bio2rdf:xCCDS"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_3,
																				"bm:ccds"
																						+ "",
																				false,
																				false);
																String searchStr_tReplace_1_4 = "bio2rdf:xVEGA"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_4,
																				"bm:vega"
																						+ "",
																				false,
																				false);
																String searchStr_tReplace_1_5 = "bio2rdf:xAccession"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_5,
																				"bm:nuccore"
																						+ "",
																				false,
																				false);
																String searchStr_tReplace_1_6 = "bio2rdf:xEC"
																		+ "";
																out7.object = StringUtils
																		.replaceAllStrictly(
																				out7.object,
																				searchStr_tReplace_1_6,
																				"bm:ec"
																						+ "",
																				false,
																				false);
																nb_line_ok_tReplace_1++;
																row3.subject = out7.subject;
																row3.predicate = out7.predicate;
																row3.object = out7.object;
																row3.literal = out7.literal;
																nb_line_tReplace_1++;

																tos_count_tReplace_1++;

																/**
																 * [tReplace_1
																 * main ] stop
																 */

																/**
																 * [tLogRow_2
																 * main ] start
																 */

																currentComponent = "tLogRow_2";

																hgnc3 = row3;

																tos_count_tLogRow_2++;

																/**
																 * [tLogRow_2
																 * main ] stop
																 */

																/**
																 * [
																 * tFlowMeter_32
																 * main ] start
																 */

																currentComponent = "tFlowMeter_32";

																count_tFlowMeter_32++;

																row19 = hgnc3;

																tos_count_tFlowMeter_32++;

																/**
																 * [
																 * tFlowMeter_32
																 * main ] stop
																 */

																/**
																 * [
																 * tFileOutputDelimited_1
																 * main ] start
																 */

																currentComponent = "tFileOutputDelimited_1";

																StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

																if (row19.subject != null) {

																	sb_tFileOutputDelimited_1
																			.append(

																			row19.subject

																			);

																}

																sb_tFileOutputDelimited_1
																		.append(OUT_DELIM_tFileOutputDelimited_1);

																if (row19.predicate != null) {

																	sb_tFileOutputDelimited_1
																			.append(

																			row19.predicate

																			);

																}

																sb_tFileOutputDelimited_1
																		.append(OUT_DELIM_tFileOutputDelimited_1);

																if (row19.object != null) {

																	sb_tFileOutputDelimited_1
																			.append(

																			row19.object

																			);

																}

																sb_tFileOutputDelimited_1
																		.append(OUT_DELIM_tFileOutputDelimited_1);

																if (row19.literal != null) {

																	sb_tFileOutputDelimited_1
																			.append(

																			row19.literal

																			);

																}

																sb_tFileOutputDelimited_1
																		.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

																nb_line_tFileOutputDelimited_1++;

																outtFileOutputDelimited_1
																		.write(sb_tFileOutputDelimited_1
																				.toString());

																tos_count_tFileOutputDelimited_1++;

																/**
																 * [
																 * tFileOutputDelimited_1
																 * main ] stop
																 */

															} // End of branch
																// "out7"

															// end for
														}

													} // End of branch "row6"

												} // C_01

											} // End of branch "out5"

										} // End of branch "row1"

										/**
										 * [tFileInputDelimited_1 end ] start
										 */

										currentComponent = "tFileInputDelimited_1";

									}
								} finally {
									if (!((Object) (context.workPath + "/hgnc.tab") instanceof java.io.InputStream)) {
										if (fid_tFileInputDelimited_1 != null) {
											fid_tFileInputDelimited_1.close();
										}
									}
									if (fid_tFileInputDelimited_1 != null) {
										globalMap
												.put(
														"tFileInputDelimited_1_NB_LINE",
														fid_tFileInputDelimited_1
																.getRowNumber());
									}
								}

								ok_Hash.put("tFileInputDelimited_1", true);
								end_Hash.put("tFileInputDelimited_1", System
										.currentTimeMillis());

								/**
								 * [tFileInputDelimited_1 end ] stop
								 */

								/**
								 * [tMap_2 end ] start
								 */

								currentComponent = "tMap_2";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_2", true);
								end_Hash.put("tMap_2", System
										.currentTimeMillis());

								/**
								 * [tMap_2 end ] stop
								 */

								/**
								 * [tReplicate_5 end ] start
								 */

								currentComponent = "tReplicate_5";

								ok_Hash.put("tReplicate_5", true);
								end_Hash.put("tReplicate_5", System
										.currentTimeMillis());

								/**
								 * [tReplicate_5 end ] stop
								 */

								/**
								 * [tSplitRow_3 end ] start
								 */

								currentComponent = "tSplitRow_3";

								globalMap.put("tSplitRow_3_NB_LINE",
										nb_line_tSplitRow_3);

								ok_Hash.put("tSplitRow_3", true);
								end_Hash.put("tSplitRow_3", System
										.currentTimeMillis());

								/**
								 * [tSplitRow_3 end ] stop
								 */

								/**
								 * [tNormalize_1 end ] start
								 */

								currentComponent = "tNormalize_1";

								globalMap.put("tNormalize_1_NB_LINE",
										nb_line_tNormalize_1);

								ok_Hash.put("tNormalize_1", true);
								end_Hash.put("tNormalize_1", System
										.currentTimeMillis());

								/**
								 * [tNormalize_1 end ] stop
								 */

								/**
								 * [tMap_1 end ] start
								 */

								currentComponent = "tMap_1";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_1", true);
								end_Hash.put("tMap_1", System
										.currentTimeMillis());

								/**
								 * [tMap_1 end ] stop
								 */

								/**
								 * [tReplace_1 end ] start
								 */

								currentComponent = "tReplace_1";

								globalMap.put("tReplace_1_NB_LINE",
										nb_line_tReplace_1);
								globalMap.put("tReplace_1_NB_LINE_OK",
										nb_line_ok_tReplace_1);

								ok_Hash.put("tReplace_1", true);
								end_Hash.put("tReplace_1", System
										.currentTimeMillis());

								/**
								 * [tReplace_1 end ] stop
								 */

								/**
								 * [tLogRow_2 end ] start
								 */

								currentComponent = "tLogRow_2";

								ok_Hash.put("tLogRow_2", true);
								end_Hash.put("tLogRow_2", System
										.currentTimeMillis());

								/**
								 * [tLogRow_2 end ] stop
								 */

								/**
								 * [tFlowMeter_32 end ] start
								 */

								currentComponent = "tFlowMeter_32";

								tFlowMeterCatcher_1.addMessage("hgnc3",
										new Integer(count_tFlowMeter_32),
										"null", "", "tFlowMeter_32");

								ok_Hash.put("tFlowMeter_32", true);
								end_Hash.put("tFlowMeter_32", System
										.currentTimeMillis());

								/**
								 * [tFlowMeter_32 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

							} finally {
								if (outtFileOutputDelimited_1 != null) {
									outtFileOutputDelimited_1.flush();
									outtFileOutputDelimited_1.close();
								}
								globalMap.put("tFileOutputDelimited_1_NB_LINE",
										nb_line_tFileOutputDelimited_1);
								globalMap.put(
										"tFileOutputDelimited_1_FILE_NAME",
										fileName_tFileOutputDelimited_1);
							} // finally

							ok_Hash.put("tFileOutputDelimited_1", true);
							end_Hash.put("tFileOutputDelimited_1", System
									.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_1 end ] stop
							 */

							/**
							 * [tReplicate_3 end ] start
							 */

							currentComponent = "tReplicate_3";

							ok_Hash.put("tReplicate_3", true);
							end_Hash.put("tReplicate_3", System
									.currentTimeMillis());

							/**
							 * [tReplicate_3 end ] stop
							 */

							/**
							 * [tSplitRow_6 end ] start
							 */

							currentComponent = "tSplitRow_6";

							globalMap.put("tSplitRow_6_NB_LINE",
									nb_line_tSplitRow_6);

							ok_Hash.put("tSplitRow_6", true);
							end_Hash.put("tSplitRow_6", System
									.currentTimeMillis());

							/**
							 * [tSplitRow_6 end ] stop
							 */

							/**
							 * [tNormalize_2 end ] start
							 */

							currentComponent = "tNormalize_2";

							globalMap.put("tNormalize_2_NB_LINE",
									nb_line_tNormalize_2);

							ok_Hash.put("tNormalize_2", true);
							end_Hash.put("tNormalize_2", System
									.currentTimeMillis());

							/**
							 * [tNormalize_2 end ] stop
							 */

							/**
							 * [tMap_4 end ] start
							 */

							currentComponent = "tMap_4";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_4", true);
							end_Hash.put("tMap_4", System.currentTimeMillis());

							/**
							 * [tMap_4 end ] stop
							 */

							/**
							 * [tLogRow_5 end ] start
							 */

							currentComponent = "tLogRow_5";

							ok_Hash.put("tLogRow_5", true);
							end_Hash.put("tLogRow_5", System
									.currentTimeMillis());

							/**
							 * [tLogRow_5 end ] stop
							 */

							/**
							 * [tFlowMeter_34 end ] start
							 */

							currentComponent = "tFlowMeter_34";

							tFlowMeterCatcher_1.addMessage("hgnc4",
									new Integer(count_tFlowMeter_34), "null",
									"", "tFlowMeter_34");

							ok_Hash.put("tFlowMeter_34", true);
							end_Hash.put("tFlowMeter_34", System
									.currentTimeMillis());

							/**
							 * [tFlowMeter_34 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

						} finally {
							if (outtFileOutputDelimited_4 != null) {
								outtFileOutputDelimited_4.flush();
								outtFileOutputDelimited_4.close();
							}
							globalMap.put("tFileOutputDelimited_4_NB_LINE",
									nb_line_tFileOutputDelimited_4);
							globalMap.put("tFileOutputDelimited_4_FILE_NAME",
									fileName_tFileOutputDelimited_4);
						} // finally

						ok_Hash.put("tFileOutputDelimited_4", true);
						end_Hash.put("tFileOutputDelimited_4", System
								.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_4 end ] stop
						 */

						/**
						 * [tLogRow_6 end ] start
						 */

						currentComponent = "tLogRow_6";

						ok_Hash.put("tLogRow_6", true);
						end_Hash.put("tLogRow_6", System.currentTimeMillis());

						/**
						 * [tLogRow_6 end ] stop
						 */

						/**
						 * [tReplicate_1 end ] start
						 */

						currentComponent = "tReplicate_1";

						ok_Hash.put("tReplicate_1", true);
						end_Hash.put("tReplicate_1", System.currentTimeMillis());

						/**
						 * [tReplicate_1 end ] stop
						 */

						/**
						 * [tSplitRow_4 end ] start
						 */

						currentComponent = "tSplitRow_4";

						globalMap.put("tSplitRow_4_NB_LINE",
								nb_line_tSplitRow_4);

						ok_Hash.put("tSplitRow_4", true);
						end_Hash.put("tSplitRow_4", System.currentTimeMillis());

						/**
						 * [tSplitRow_4 end ] stop
						 */

						/**
						 * [tMap_5 end ] start
						 */

						currentComponent = "tMap_5";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_5", true);
						end_Hash.put("tMap_5", System.currentTimeMillis());

						/**
						 * [tMap_5 end ] stop
						 */

						/**
						 * [tLogRow_3 end ] start
						 */

						currentComponent = "tLogRow_3";

						ok_Hash.put("tLogRow_3", true);
						end_Hash.put("tLogRow_3", System.currentTimeMillis());

						/**
						 * [tLogRow_3 end ] stop
						 */

						/**
						 * [tFlowMeter_30 end ] start
						 */

						currentComponent = "tFlowMeter_30";

						tFlowMeterCatcher_1.addMessage("hgnc2", new Integer(
								count_tFlowMeter_30), "null", "",
								"tFlowMeter_30");

						ok_Hash.put("tFlowMeter_30", true);
						end_Hash.put("tFlowMeter_30", System
								.currentTimeMillis());

						/**
						 * [tFlowMeter_30 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

					} finally {
						if (outtFileOutputDelimited_2 != null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
						globalMap.put("tFileOutputDelimited_2_NB_LINE",
								nb_line_tFileOutputDelimited_2);
						globalMap.put("tFileOutputDelimited_2_FILE_NAME",
								fileName_tFileOutputDelimited_2);
					} // finally

					ok_Hash.put("tFileOutputDelimited_2", true);
					end_Hash.put("tFileOutputDelimited_2", System
							.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_2 end ] stop
					 */

					/**
					 * [tSplitRow_1 end ] start
					 */

					currentComponent = "tSplitRow_1";

					globalMap.put("tSplitRow_1_NB_LINE", nb_line_tSplitRow_1);

					ok_Hash.put("tSplitRow_1", true);
					end_Hash.put("tSplitRow_1", System.currentTimeMillis());

					/**
					 * [tSplitRow_1 end ] stop
					 */

					/**
					 * [tLogRow_4 end ] start
					 */

					currentComponent = "tLogRow_4";

					ok_Hash.put("tLogRow_4", true);
					end_Hash.put("tLogRow_4", System.currentTimeMillis());

					/**
					 * [tLogRow_4 end ] stop
					 */

					/**
					 * [tFlowMeter_25 end ] start
					 */

					currentComponent = "tFlowMeter_25";

					tFlowMeterCatcher_1.addMessage("hgnc1", new Integer(
							count_tFlowMeter_25), "null", "", "tFlowMeter_25");

					ok_Hash.put("tFlowMeter_25", true);
					end_Hash.put("tFlowMeter_25", System.currentTimeMillis());

					/**
					 * [tFlowMeter_25 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_14 end ] start
					 */

					currentComponent = "tFileOutputDelimited_14";

				} finally {
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}
					globalMap.put("tFileOutputDelimited_14_NB_LINE",
							nb_line_tFileOutputDelimited_14);
					globalMap.put("tFileOutputDelimited_14_FILE_NAME",
							fileName_tFileOutputDelimited_14);
				} // finally

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14", System
						.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());
				currentComponent = "tLogRow_7";

				int tos_count_tLogRow_7 = 0;

				// /////////////////////

				class Util_tLogRow_7 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth,
							int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_7";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null
									&& row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 17;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth
								- title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "moment");
						for (int i = 0; i < titleWidth - "moment".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null
								&& i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "pid");
						for (int i = 0; i < titleWidth - "pid".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null
								&& i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "father_pid");
						for (int i = 0; i < titleWidth - "father_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null
								&& i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "root_pid");
						for (int i = 0; i < titleWidth - "root_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null
								&& i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "system_pid");
						for (int i = 0; i < titleWidth - "system_pid".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[4]);
						for (int i = 0; row[4] == null && i < dataWidth - 3
								|| row[4] != null
								&& i < dataWidth - row[4].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "project");
						for (int i = 0; i < titleWidth - "project".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[5]);
						for (int i = 0; row[5] == null && i < dataWidth - 3
								|| row[5] != null
								&& i < dataWidth - row[5].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job");
						for (int i = 0; i < titleWidth - "job".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[6]);
						for (int i = 0; row[6] == null && i < dataWidth - 3
								|| row[6] != null
								&& i < dataWidth - row[6].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_repository_id");
						for (int i = 0; i < titleWidth
								- "job_repository_id".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[7]);
						for (int i = 0; row[7] == null && i < dataWidth - 3
								|| row[7] != null
								&& i < dataWidth - row[7].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "job_version");
						for (int i = 0; i < titleWidth - "job_version".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[8]);
						for (int i = 0; row[8] == null && i < dataWidth - 3
								|| row[8] != null
								&& i < dataWidth - row[8].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "context");
						for (int i = 0; i < titleWidth - "context".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[9]);
						for (int i = 0; row[9] == null && i < dataWidth - 3
								|| row[9] != null
								&& i < dataWidth - row[9].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "origin");
						for (int i = 0; i < titleWidth - "origin".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[10]);
						for (int i = 0; row[10] == null && i < dataWidth - 3
								|| row[10] != null
								&& i < dataWidth - row[10].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "label");
						for (int i = 0; i < titleWidth - "label".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[11]);
						for (int i = 0; row[11] == null && i < dataWidth - 3
								|| row[11] != null
								&& i < dataWidth - row[11].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "count");
						for (int i = 0; i < titleWidth - "count".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[12]);
						for (int i = 0; row[12] == null && i < dataWidth - 3
								|| row[12] != null
								&& i < dataWidth - row[12].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "reference");
						for (int i = 0; i < titleWidth - "reference".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[13]);
						for (int i = 0; row[13] == null && i < dataWidth - 3
								|| row[13] != null
								&& i < dataWidth - row[13].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "thresholds");
						for (int i = 0; i < titleWidth - "thresholds".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[14]);
						for (int i = 0; row[14] == null && i < dataWidth - 3
								|| row[14] != null
								&& i < dataWidth - row[14].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_7 util_tLogRow_7 = new Util_tLogRow_7();

				java.io.PrintStream consoleOut_tLogRow_7 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_7 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
				}

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
				// /////////////////////

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System
						.currentTimeMillis());
				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row16.pid = pid;
					row16.root_pid = rootPid;
					row16.father_pid = fatherPid;
					row16.project = projectName;
					row16.job = jobName;
					row16.context = contextStr;
					row16.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row16.moment = mcm.getMoment();
					row16.job_version = mcm.getJobVersion();
					row16.job_repository_id = mcm.getJobId();
					row16.system_pid = mcm.getSystemPid();
					row16.label = mcm.getLabel();
					row16.count = mcm.getCount();
					row16.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense()
							+ "_count");
					row16.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */
					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_7 main ] start
					 */

					currentComponent = "tLogRow_7";

					// /////////////////////

					strBuffer_tLogRow_7 = new StringBuilder();

					if (row16.moment != null) { //

						strBuffer_tLogRow_7.append(FormatterUtils.format_Date(
								row16.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.pid != null) { //

						strBuffer_tLogRow_7.append(String.valueOf(row16.pid));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.father_pid != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.father_pid));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.root_pid != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.root_pid));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.system_pid != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.system_pid));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.project != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.project));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.job != null) { //

						strBuffer_tLogRow_7.append(String.valueOf(row16.job));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.job_repository_id != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.job_repository_id));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.job_version != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.job_version));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.context != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.context));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.origin != null) { //

						strBuffer_tLogRow_7
								.append(String.valueOf(row16.origin));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.label != null) { //

						strBuffer_tLogRow_7.append(String.valueOf(row16.label));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.count != null) { //

						strBuffer_tLogRow_7.append(String.valueOf(row16.count));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.reference != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.reference));

					} //

					strBuffer_tLogRow_7.append("|");

					if (row16.thresholds != null) { //

						strBuffer_tLogRow_7.append(String
								.valueOf(row16.thresholds));

					} //

					String[] row_tLogRow_7 = new String[15];

					if (row16.moment != null) { //
						row_tLogRow_7[0] = FormatterUtils.format_Date(
								row16.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row16.pid != null) { //
						row_tLogRow_7[1] = String.valueOf(row16.pid);

					} //

					if (row16.father_pid != null) { //
						row_tLogRow_7[2] = String.valueOf(row16.father_pid);

					} //

					if (row16.root_pid != null) { //
						row_tLogRow_7[3] = String.valueOf(row16.root_pid);

					} //

					if (row16.system_pid != null) { //
						row_tLogRow_7[4] = String.valueOf(row16.system_pid);

					} //

					if (row16.project != null) { //
						row_tLogRow_7[5] = String.valueOf(row16.project);

					} //

					if (row16.job != null) { //
						row_tLogRow_7[6] = String.valueOf(row16.job);

					} //

					if (row16.job_repository_id != null) { //
						row_tLogRow_7[7] = String
								.valueOf(row16.job_repository_id);

					} //

					if (row16.job_version != null) { //
						row_tLogRow_7[8] = String.valueOf(row16.job_version);

					} //

					if (row16.context != null) { //
						row_tLogRow_7[9] = String.valueOf(row16.context);

					} //

					if (row16.origin != null) { //
						row_tLogRow_7[10] = String.valueOf(row16.origin);

					} //

					if (row16.label != null) { //
						row_tLogRow_7[11] = String.valueOf(row16.label);

					} //

					if (row16.count != null) { //
						row_tLogRow_7[12] = String.valueOf(row16.count);

					} //

					if (row16.reference != null) { //
						row_tLogRow_7[13] = String.valueOf(row16.reference);

					} //

					if (row16.thresholds != null) { //
						row_tLogRow_7[14] = String.valueOf(row16.thresholds);

					} //

					nb_line_tLogRow_7++;
					consoleOut_tLogRow_7.println(util_tLogRow_7.print(
							row_tLogRow_7, nb_line_tLogRow_7));
					consoleOut_tLogRow_7.flush();
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_7++;

					/**
					 * [tLogRow_7 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				// ////
				// ////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

				// /////////////////////

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hgnc_3_gene hgnc_3_geneClass = new hgnc_3_gene();

		int exitCode = hgnc_3_geneClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = hgnc_3_gene.class.getClassLoader()
					.getResourceAsStream(
							"bio2rdf/hgnc_3_gene_1_0/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

				context.workPath = (String) context.getProperty("workPath");

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("workPath")) {
				context.workPath = (String) parentContextMap.get("workPath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			status = "failure";
			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : hgnc_3_gene");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index),
						replaceEscapeChars(keyValue.substring(index + 1)));
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 300641 characters generated by Talend Open Studio for Data Integration on the
 * 25 avril 2012 14:25:47 EDT
 ************************************************************************************************/
