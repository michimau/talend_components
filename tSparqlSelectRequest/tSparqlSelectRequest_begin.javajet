<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String sDisplayUrl = ElementParameterParser.getValue(node, "__CHECK_DISPLAY_URL__");
String sTriplestoreType = ElementParameterParser.getValue(node, "__TRIPLESTORE_TYPE__");
String sSparqlEndpoint = "";

if (sTriplestoreType.equals("virtuoso"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__VIRTUOSO_ENDPOINT__");
}
else if (sTriplestoreType.equals("linkedlifedata"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__LINKEDLIFE_ENDPOINT__");
}
else if (sTriplestoreType.equals("ebi"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__EBI_ENDPOINT__");
}
else if (sTriplestoreType.equals("uniprot"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__UNIPROT_ENDPOINT__");
}


String sQuery = ElementParameterParser.getValue(node, "__QUERY__");
sQuery = sQuery.replaceAll("\n", " ");

%>

String URL_string_<%=cid%>;

<%
if (sTriplestoreType.equals("virtuoso"))
{
%>
	URL_string_<%=cid%> = <%=sSparqlEndpoint%> + "?default-graph-uri=&query=" + java.net.URLEncoder.encode(<%=sQuery%>, "UTF-8") + "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";
<%
}
else if (sTriplestoreType.equals("linkedlifedata"))
{
%>
	URL_string_<%=cid%> = <%=sSparqlEndpoint%> + ".json?query=" + java.net.URLEncoder.encode(<%=sQuery%>, "UTF-8") + "&_implicit=false&implicit=true&_form=%2Fsparql";
<%
}
else if (sTriplestoreType.equals("ebi"))
{
%>
	URL_string_<%=cid%> = <%=sSparqlEndpoint%>;
	if (URL_string_<%=cid%>.contains("ebi.ac.uk/rdf/services/reactome/sparql"))
	{
		URL_string_<%=cid%> = "http://www.ebi.ac.uk/rdf/services/reactome/servlet/query";
	}
	URL_string_<%=cid%> = URL_string_<%=cid%> + "?query=" + java.net.URLEncoder.encode(<%=sQuery%>, "UTF-8") + "&format=JSON";
<%
}
else if (sTriplestoreType.equals("uniprot"))
{
%>
	URL_string_<%=cid%> = <%=sSparqlEndpoint%> + "/sparql?format=srj&query=" + java.net.URLEncoder.encode(<%=sQuery%>, "UTF-8");
<%
}
%>

<%
if (sDisplayUrl.equals("true"))
{
%>
	System.out.println(URL_string_<%=cid%>);
<%
}
%>


	org.json.JSONArray jsonArray_<%=cid%> = new org.json.JSONArray();
	
	org.json.JSONArray jsonKeysArray_<%=cid%>;
	
	java.util.ArrayList<String> queryKeys_<%=cid%> = new java.util.ArrayList<String>();
	// ArrayList that will contain the key value of the query sorted correctly
	
	org.json.JSONObject jsonObj_<%=cid%>;
	
	java.util.Iterator<String> queryKeysIterator_<%=cid%>;


<%
///// Construct the HTTP request
%>

java.net.URL url_<%=cid%> = new java.net.URL(URL_string_<%=cid%>);

java.net.HttpURLConnection urlConn_<%=cid%> = (java.net.HttpURLConnection) url_<%=cid%>.openConnection();
urlConn_<%=cid%>.setRequestMethod("GET");
urlConn_<%=cid%>.setDoOutput(true);
urlConn_<%=cid%>.setDoInput(true);
urlConn_<%=cid%>.setUseCaches(false);

try {
	urlConn_<%=cid%>.connect();


	<%
	////////// Get the response from an Input Stream and convert it to a string
	%>
	
	byte[] buffer_<%=cid%> = new byte[1024];
	int bos_buffer_<%=cid%> = 0;
	
	StringBuilder sb_<%=cid%>=new StringBuilder(); 
	
	
	if (java.net.HttpURLConnection.HTTP_OK == (urlConn_<%=cid%>.getResponseCode()))
	{
		java.io.InputStream bis_<%=cid%> = new java.io.BufferedInputStream(urlConn_<%=cid%>.getInputStream());
		<%// Get the input stream containing the request response 
	
		// The inputstream is read table of bytes by table of bytes (table of bytes = buffer_cid)	
		// bos_buffer_cid is the byte table size
		%>
		while ((bos_buffer_<%=cid%> = bis_<%=cid%>.read(buffer_<%=cid%>)) != -1)
		{
			// Then the table of bytes and its size are used to generate a string
			// which is added to a string builder that will contain the whole response
			sb_<%=cid%>.append(new String(buffer_<%=cid%>,0,bos_buffer_<%=cid%>));
		}
		bis_<%=cid%>.close();
		
	} else {
		System.err.println(urlConn_<%=cid%>.getResponseCode() + " " + urlConn_<%=cid%>.getResponseMessage());
	}
	
	urlConn_<%=cid%>.disconnect();
	
	<%
	/////////// Parse the JSON object
	%>
	
	jsonObj_<%=cid%> = new org.json.JSONObject(sb_<%=cid%>.toString());
	
	jsonKeysArray_<%=cid%> = jsonObj_<%=cid%>.getJSONObject("head").getJSONArray("vars");
	for (int k_<%=cid%> = 0; k_<%=cid%> < jsonKeysArray_<%=cid%>.length(); k_<%=cid%>++)
	{
		queryKeys_<%=cid%>.add(jsonKeysArray_<%=cid%>.getString(k_<%=cid%>));
	}
	
	
	jsonArray_<%=cid%> = jsonObj_<%=cid%>.getJSONObject("results").getJSONArray("bindings");

}
catch (Exception e) {
	System.err.println("UnknownHostException");
}

if (jsonArray_<%=cid%>.length() == 0)
{
	globalMap.put("<%=cid%>_HAS_RESULTS", false);
}
else
{
	globalMap.put("<%=cid%>_HAS_RESULTS", true);
}

int i_<%=cid%>;
int nb_line_<%=cid %> = 0;


for (i_<%=cid%> = 0; i_<%=cid%> < jsonArray_<%=cid%>.length(); i_<%=cid%>++)
{





