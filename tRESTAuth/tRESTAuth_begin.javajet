<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
        java.util.Map
        java.util.List
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String url = ElementParameterParser.getValue(node,"__URL__");
String method = ElementParameterParser.getValue(node,"__METHOD__");
List<Map<String, String>> headers = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__HEADERS__");

boolean bNeedAuthentication = "true".equals(ElementParameterParser.getValue(node, "__NEED_AUTHENTICATION__"));
String sUser = ElementParameterParser.getValue(node, "__USR__");
String sPwd = ElementParameterParser.getValue(node, "__PWD__");
        
String body = ElementParameterParser.getValue(node,"__BODY__");
body = body.replaceAll("[\r\n]", " ");
%>
		String endpoint_<%=cid%> = <%=url%>;
		
		String trustStoreFile_<%=cid%> = System.getProperty("javax.net.ssl.trustStore");
		String trustStoreType_<%=cid%> = System.getProperty("javax.net.ssl.trustStoreType");
		String trustStorePWD_<%=cid%> = System.getProperty("javax.net.ssl.trustStorePassword");
		
		String keyStoreFile_<%=cid%> = System.getProperty("javax.net.ssl.keyStore");
		String keyStoreType_<%=cid%> = System.getProperty("javax.net.ssl.keyStoreType");
		String keyStorePWD_<%=cid%> = System.getProperty("javax.net.ssl.keyStorePassword");
		
		com.sun.jersey.api.client.config.ClientConfig config_<%=cid%> = new com.sun.jersey.api.client.config.DefaultClientConfig();
		javax.net.ssl.SSLContext ctx_<%=cid%> = javax.net.ssl.SSLContext.getInstance("SSL");
		
		javax.net.ssl.TrustManager[] tms_<%=cid%> = null;
		if(trustStoreFile_<%=cid%>!=null && trustStoreType_<%=cid%>!=null){
			char[] password_<%=cid%> = null;
			if(trustStorePWD_<%=cid%>!=null)
				password_<%=cid%> = trustStorePWD_<%=cid%>.toCharArray();
			java.security.KeyStore trustStore_<%=cid%> = java.security.KeyStore.getInstance(trustStoreType_<%=cid%>);
			trustStore_<%=cid%>.load(new java.io.FileInputStream(trustStoreFile_<%=cid%>), password_<%=cid%>);
			
			javax.net.ssl.TrustManagerFactory tmf_<%=cid%> = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
            tmf_<%=cid%>.init(trustStore_<%=cid%>);
            tms_<%=cid%> = tmf_<%=cid%>.getTrustManagers();
		}
		
		javax.net.ssl.KeyManager[] kms_<%=cid%> = null;
		if(keyStoreFile_<%=cid%>!=null && keyStoreType_<%=cid%>!=null){
			char[] password_<%=cid%> = null;
			if(keyStorePWD_<%=cid%>!=null)
				password_<%=cid%> = keyStorePWD_<%=cid%>.toCharArray();
			java.security.KeyStore keyStore_<%=cid%> = java.security.KeyStore.getInstance(keyStoreType_<%=cid%>);
			keyStore_<%=cid%>.load(new java.io.FileInputStream(keyStoreFile_<%=cid%>), password_<%=cid%>);
			
			javax.net.ssl.KeyManagerFactory kmf_<%=cid%> = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
            kmf_<%=cid%>.init(keyStore_<%=cid%>,password_<%=cid%>);
            kms_<%=cid%> = kmf_<%=cid%>.getKeyManagers();
		}
		
        ctx_<%=cid%>.init(kms_<%=cid%>, tms_<%=cid%> , null);
        config_<%=cid%>.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                    new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                        public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                            return true;
                        }
                    }, ctx_<%=cid%>));

		com.sun.jersey.api.client.Client restClient_<%=cid%> = com.sun.jersey.api.client.Client.create(config_<%=cid%>);
		
<%if (bNeedAuthentication){%>
 		restClient_<%=cid%>.addFilter(new com.sun.jersey.api.client.filter.HTTPBasicAuthFilter(<%=sUser%>, <%=sPwd%>));
<%}%>
		
		com.sun.jersey.api.client.WebResource restResource_<%=cid%>;
		if(endpoint_<%=cid%>!=null && !("").equals(endpoint_<%=cid%>)){
			restResource_<%=cid%> = restClient_<%=cid%>.resource(endpoint_<%=cid%>);
		}else{
			throw new IllegalArgumentException("url can't be empty!");
		}
		
		com.sun.jersey.api.client.ClientResponse errorResponse_<%=cid%> = null;
		String restResponse_<%=cid%> = "";
	try{
		restResponse_<%=cid%> = restResource_<%=cid%>
		
<%
        for (int i = 0; i < headers.size(); i++) {
            Map<String, String> line = headers.get(i);
%>
        .header(<%= line.get("NAME") %>,<%= line.get("VALUE") %>)
<%
        }
%>  
<%
		if("GET".equals(method)){
%>
		.get(String.class);
<%
		}else if("POST".equals(method)){
%>
		.post(String.class,<%=body%>);
<%		
		}else if("PUT".equals(method)){
%>
		.put(String.class,<%=body%>);
<%
		}else if("DELETE".equals(method)){
%>
		.delete(String.class);
<%
		}	
%>
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
        errorResponse_<%=cid%> = ue.getResponse();
    }
		// for output
<%
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	if (conns!=null) {//1
		if (conns.size()>0) {//2
			IConnection conn = conns.get(0); //the first connection
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//3
%>		
				<%=conn.getName() %> = new <%=conn.getName() %>Struct();
				if(errorResponse_<%=cid%>!=null){
					<%=conn.getName() %>.ERROR_CODE = errorResponse_<%=cid%>.getStatus();
				}else{
					<%=conn.getName() %>.Body = restResponse_<%=cid%>;
				}
<%			
			}//3
		}//2
	}//1
%>